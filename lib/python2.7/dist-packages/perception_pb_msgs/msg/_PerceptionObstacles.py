# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_pb_msgs/PerceptionObstacles.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import header_pb_msgs.msg
import perception_pb_msgs.msg

class PerceptionObstacles(genpy.Message):
  _md5sum = "0e638b36900c4f56102d536f647bde9d"
  _type = "perception_pb_msgs/PerceptionObstacles"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """PerceptionObstacle[] perception_obstacle 
header_pb_msgs/Header header 

================================================================================
MSG: perception_pb_msgs/PerceptionObstacle
int32 id 
Point position 
float64 theta 
Point velocity 
float64 length 
float64 width 
float64 height 
Point[] polygon_point 
float64 tracking_time 
int32 type 
float64 timestamp 

================================================================================
MSG: perception_pb_msgs/Point
float64 x 
float64 y 
float64 z 

================================================================================
MSG: header_pb_msgs/Header
float64 timestamp_sec 
string module_name 
uint32 sequence_num 
"""
  __slots__ = ['perception_obstacle','header']
  _slot_types = ['perception_pb_msgs/PerceptionObstacle[]','header_pb_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       perception_obstacle,header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PerceptionObstacles, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.perception_obstacle is None:
        self.perception_obstacle = []
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
    else:
      self.perception_obstacle = []
      self.header = header_pb_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.perception_obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.perception_obstacle:
        buff.write(_struct_i.pack(val1.id))
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.theta))
        _v2 = val1.velocity
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_3d.pack(_x.length, _x.width, _x.height))
        length = len(val1.polygon_point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.polygon_point:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_did.pack(_x.tracking_time, _x.type, _x.timestamp))
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.header.sequence_num))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.perception_obstacle is None:
        self.perception_obstacle = None
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.perception_obstacle = []
      for i in range(0, length):
        val1 = perception_pb_msgs.msg.PerceptionObstacle()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.theta,) = _struct_d.unpack(str[start:end])
        _v4 = val1.velocity
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.length, _x.width, _x.height,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.polygon_point = []
        for i in range(0, length):
          val2 = perception_pb_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.polygon_point.append(val2)
        _x = val1
        start = end
        end += 20
        (_x.tracking_time, _x.type, _x.timestamp,) = _struct_did.unpack(str[start:end])
        self.perception_obstacle.append(val1)
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (self.header.sequence_num,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.perception_obstacle)
      buff.write(_struct_I.pack(length))
      for val1 in self.perception_obstacle:
        buff.write(_struct_i.pack(val1.id))
        _v5 = val1.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.theta))
        _v6 = val1.velocity
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_3d.pack(_x.length, _x.width, _x.height))
        length = len(val1.polygon_point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.polygon_point:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_did.pack(_x.tracking_time, _x.type, _x.timestamp))
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.header.sequence_num))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.perception_obstacle is None:
        self.perception_obstacle = None
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.perception_obstacle = []
      for i in range(0, length):
        val1 = perception_pb_msgs.msg.PerceptionObstacle()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.theta,) = _struct_d.unpack(str[start:end])
        _v8 = val1.velocity
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.length, _x.width, _x.height,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.polygon_point = []
        for i in range(0, length):
          val2 = perception_pb_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.polygon_point.append(val2)
        _x = val1
        start = end
        end += 20
        (_x.tracking_time, _x.type, _x.timestamp,) = _struct_did.unpack(str[start:end])
        self.perception_obstacle.append(val1)
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (self.header.sequence_num,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_did = struct.Struct("<did")
_struct_d = struct.Struct("<d")
_struct_3d = struct.Struct("<3d")
