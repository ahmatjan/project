# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hdmap_pb_msgs/CurveSegment.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hdmap_pb_msgs.msg

class CurveSegment(genpy.Message):
  _md5sum = "e8e639851340fc147eabd434b5f7c8bd"
  _type = "hdmap_pb_msgs/CurveSegment"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """LineSegment line_segment 
Arc arc 
Spiral spiral 
Spline spline 
Poly3 poly3 
float64 s 
Point start_position 
float64 heading 
float64 length 

================================================================================
MSG: hdmap_pb_msgs/LineSegment
Point[] point 

================================================================================
MSG: hdmap_pb_msgs/Point
float64 x 
float64 y 
float64 z 

================================================================================
MSG: hdmap_pb_msgs/Arc
Point center 
float64 radius 
float64 start_angle 
float64 end_angle 

================================================================================
MSG: hdmap_pb_msgs/Spiral
float64 curv_start 
float64 curv_end 

================================================================================
MSG: hdmap_pb_msgs/Spline
int32 dimension 
int32 degree 
float64[] knot 
Point[] control 

================================================================================
MSG: hdmap_pb_msgs/Poly3
"""
  __slots__ = ['line_segment','arc','spiral','spline','poly3','s','start_position','heading','length']
  _slot_types = ['hdmap_pb_msgs/LineSegment','hdmap_pb_msgs/Arc','hdmap_pb_msgs/Spiral','hdmap_pb_msgs/Spline','hdmap_pb_msgs/Poly3','float64','hdmap_pb_msgs/Point','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       line_segment,arc,spiral,spline,poly3,s,start_position,heading,length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CurveSegment, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.line_segment is None:
        self.line_segment = hdmap_pb_msgs.msg.LineSegment()
      if self.arc is None:
        self.arc = hdmap_pb_msgs.msg.Arc()
      if self.spiral is None:
        self.spiral = hdmap_pb_msgs.msg.Spiral()
      if self.spline is None:
        self.spline = hdmap_pb_msgs.msg.Spline()
      if self.poly3 is None:
        self.poly3 = hdmap_pb_msgs.msg.Poly3()
      if self.s is None:
        self.s = 0.
      if self.start_position is None:
        self.start_position = hdmap_pb_msgs.msg.Point()
      if self.heading is None:
        self.heading = 0.
      if self.length is None:
        self.length = 0.
    else:
      self.line_segment = hdmap_pb_msgs.msg.LineSegment()
      self.arc = hdmap_pb_msgs.msg.Arc()
      self.spiral = hdmap_pb_msgs.msg.Spiral()
      self.spline = hdmap_pb_msgs.msg.Spline()
      self.poly3 = hdmap_pb_msgs.msg.Poly3()
      self.s = 0.
      self.start_position = hdmap_pb_msgs.msg.Point()
      self.heading = 0.
      self.length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.line_segment.point)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_segment.point:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_8d2i.pack(_x.arc.center.x, _x.arc.center.y, _x.arc.center.z, _x.arc.radius, _x.arc.start_angle, _x.arc.end_angle, _x.spiral.curv_start, _x.spiral.curv_end, _x.spline.dimension, _x.spline.degree))
      length = len(self.spline.knot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.spline.knot))
      length = len(self.spline.control)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline.control:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_6d.pack(_x.s, _x.start_position.x, _x.start_position.y, _x.start_position.z, _x.heading, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.line_segment is None:
        self.line_segment = hdmap_pb_msgs.msg.LineSegment()
      if self.arc is None:
        self.arc = hdmap_pb_msgs.msg.Arc()
      if self.spiral is None:
        self.spiral = hdmap_pb_msgs.msg.Spiral()
      if self.spline is None:
        self.spline = hdmap_pb_msgs.msg.Spline()
      if self.poly3 is None:
        self.poly3 = hdmap_pb_msgs.msg.Poly3()
      if self.start_position is None:
        self.start_position = hdmap_pb_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_segment.point = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.line_segment.point.append(val1)
      _x = self
      start = end
      end += 72
      (_x.arc.center.x, _x.arc.center.y, _x.arc.center.z, _x.arc.radius, _x.arc.start_angle, _x.arc.end_angle, _x.spiral.curv_start, _x.spiral.curv_end, _x.spline.dimension, _x.spline.degree,) = _struct_8d2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline.knot = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline.control = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.spline.control.append(val1)
      _x = self
      start = end
      end += 48
      (_x.s, _x.start_position.x, _x.start_position.y, _x.start_position.z, _x.heading, _x.length,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.line_segment.point)
      buff.write(_struct_I.pack(length))
      for val1 in self.line_segment.point:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_8d2i.pack(_x.arc.center.x, _x.arc.center.y, _x.arc.center.z, _x.arc.radius, _x.arc.start_angle, _x.arc.end_angle, _x.spiral.curv_start, _x.spiral.curv_end, _x.spline.dimension, _x.spline.degree))
      length = len(self.spline.knot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.spline.knot.tostring())
      length = len(self.spline.control)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline.control:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_6d.pack(_x.s, _x.start_position.x, _x.start_position.y, _x.start_position.z, _x.heading, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.line_segment is None:
        self.line_segment = hdmap_pb_msgs.msg.LineSegment()
      if self.arc is None:
        self.arc = hdmap_pb_msgs.msg.Arc()
      if self.spiral is None:
        self.spiral = hdmap_pb_msgs.msg.Spiral()
      if self.spline is None:
        self.spline = hdmap_pb_msgs.msg.Spline()
      if self.poly3 is None:
        self.poly3 = hdmap_pb_msgs.msg.Poly3()
      if self.start_position is None:
        self.start_position = hdmap_pb_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.line_segment.point = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.line_segment.point.append(val1)
      _x = self
      start = end
      end += 72
      (_x.arc.center.x, _x.arc.center.y, _x.arc.center.z, _x.arc.radius, _x.arc.start_angle, _x.arc.end_angle, _x.spiral.curv_start, _x.spiral.curv_end, _x.spline.dimension, _x.spline.degree,) = _struct_8d2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline.knot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline.control = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.spline.control.append(val1)
      _x = self
      start = end
      end += 48
      (_x.s, _x.start_position.x, _x.start_position.y, _x.start_position.z, _x.heading, _x.length,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8d2i = struct.Struct("<8d2i")
_struct_6d = struct.Struct("<6d")
_struct_3d = struct.Struct("<3d")
