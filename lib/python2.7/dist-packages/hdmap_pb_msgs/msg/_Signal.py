# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hdmap_pb_msgs/Signal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hdmap_pb_msgs.msg

class Signal(genpy.Message):
  _md5sum = "aa6df01c6aad20d364660ddf75a2c1c5"
  _type = "hdmap_pb_msgs/Signal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Id id 
Polygon boundary 
Subsignal[] subsignal 
Id[] overlap_id 
int32 type 
Curve[] stop_line 

================================================================================
MSG: hdmap_pb_msgs/Id
int8 id 

================================================================================
MSG: hdmap_pb_msgs/Polygon
Point[] point 

================================================================================
MSG: hdmap_pb_msgs/Point
float64 x 
float64 y 
float64 z 

================================================================================
MSG: hdmap_pb_msgs/Subsignal
Id id 
int32 type 
Point location 

================================================================================
MSG: hdmap_pb_msgs/Curve
CurveSegment[] segment 

================================================================================
MSG: hdmap_pb_msgs/CurveSegment
LineSegment line_segment 
Arc arc 
Spiral spiral 
Spline spline 
Poly3 poly3 
float64 s 
Point start_position 
float64 heading 
float64 length 

================================================================================
MSG: hdmap_pb_msgs/LineSegment
Point[] point 

================================================================================
MSG: hdmap_pb_msgs/Arc
Point center 
float64 radius 
float64 start_angle 
float64 end_angle 

================================================================================
MSG: hdmap_pb_msgs/Spiral
float64 curv_start 
float64 curv_end 

================================================================================
MSG: hdmap_pb_msgs/Spline
int32 dimension 
int32 degree 
float64[] knot 
Point[] control 

================================================================================
MSG: hdmap_pb_msgs/Poly3
"""
  __slots__ = ['id','boundary','subsignal','overlap_id','type','stop_line']
  _slot_types = ['hdmap_pb_msgs/Id','hdmap_pb_msgs/Polygon','hdmap_pb_msgs/Subsignal[]','hdmap_pb_msgs/Id[]','int32','hdmap_pb_msgs/Curve[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,boundary,subsignal,overlap_id,type,stop_line

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Signal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.boundary is None:
        self.boundary = hdmap_pb_msgs.msg.Polygon()
      if self.subsignal is None:
        self.subsignal = []
      if self.overlap_id is None:
        self.overlap_id = []
      if self.type is None:
        self.type = 0
      if self.stop_line is None:
        self.stop_line = []
    else:
      self.id = hdmap_pb_msgs.msg.Id()
      self.boundary = hdmap_pb_msgs.msg.Polygon()
      self.subsignal = []
      self.overlap_id = []
      self.type = 0
      self.stop_line = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.id.id))
      length = len(self.boundary.point)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary.point:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.subsignal)
      buff.write(_struct_I.pack(length))
      for val1 in self.subsignal:
        _v1 = val1.id
        buff.write(_struct_b.pack(_v1.id))
        buff.write(_struct_i.pack(val1.type))
        _v2 = val1.location
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.overlap_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.overlap_id:
        buff.write(_struct_b.pack(val1.id))
      buff.write(_struct_i.pack(self.type))
      length = len(self.stop_line)
      buff.write(_struct_I.pack(length))
      for val1 in self.stop_line:
        length = len(val1.segment)
        buff.write(_struct_I.pack(length))
        for val2 in val1.segment:
          _v3 = val2.line_segment
          length = len(_v3.point)
          buff.write(_struct_I.pack(length))
          for val4 in _v3.point:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v4 = val2.arc
          _v5 = _v4.center
          _x = _v5
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v4
          buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
          _v6 = val2.spiral
          _x = _v6
          buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
          _v7 = val2.spline
          _x = _v7
          buff.write(_struct_2i.pack(_x.dimension, _x.degree))
          length = len(_v7.knot)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v7.knot))
          length = len(_v7.control)
          buff.write(_struct_I.pack(length))
          for val4 in _v7.control:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v8 = val2.poly3
          pass
          buff.write(_struct_d.pack(val2.s))
          _v9 = val2.start_position
          _x = _v9
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_struct_2d.pack(_x.heading, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.boundary is None:
        self.boundary = hdmap_pb_msgs.msg.Polygon()
      if self.subsignal is None:
        self.subsignal = None
      if self.overlap_id is None:
        self.overlap_id = None
      if self.stop_line is None:
        self.stop_line = None
      end = 0
      start = end
      end += 1
      (self.id.id,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary.point = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.boundary.point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.subsignal = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Subsignal()
        _v10 = val1.id
        start = end
        end += 1
        (_v10.id,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v11 = val1.location
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.subsignal.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.overlap_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.overlap_id.append(val1)
      start = end
      end += 4
      (self.type,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stop_line = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Curve()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.segment = []
        for i in range(0, length):
          val2 = hdmap_pb_msgs.msg.CurveSegment()
          _v12 = val2.line_segment
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v12.point = []
          for i in range(0, length):
            val4 = hdmap_pb_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v12.point.append(val4)
          _v13 = val2.arc
          _v14 = _v13.center
          _x = _v14
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v13
          start = end
          end += 24
          (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
          _v15 = val2.spiral
          _x = _v15
          start = end
          end += 16
          (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
          _v16 = val2.spline
          _x = _v16
          start = end
          end += 8
          (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v16.knot = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v16.control = []
          for i in range(0, length):
            val4 = hdmap_pb_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v16.control.append(val4)
          _v17 = val2.poly3
          start = end
          end += 8
          (val2.s,) = _struct_d.unpack(str[start:end])
          _v18 = val2.start_position
          _x = _v18
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = val2
          start = end
          end += 16
          (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
          val1.segment.append(val2)
        self.stop_line.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.id.id))
      length = len(self.boundary.point)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundary.point:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.subsignal)
      buff.write(_struct_I.pack(length))
      for val1 in self.subsignal:
        _v19 = val1.id
        buff.write(_struct_b.pack(_v19.id))
        buff.write(_struct_i.pack(val1.type))
        _v20 = val1.location
        _x = _v20
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.overlap_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.overlap_id:
        buff.write(_struct_b.pack(val1.id))
      buff.write(_struct_i.pack(self.type))
      length = len(self.stop_line)
      buff.write(_struct_I.pack(length))
      for val1 in self.stop_line:
        length = len(val1.segment)
        buff.write(_struct_I.pack(length))
        for val2 in val1.segment:
          _v21 = val2.line_segment
          length = len(_v21.point)
          buff.write(_struct_I.pack(length))
          for val4 in _v21.point:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v22 = val2.arc
          _v23 = _v22.center
          _x = _v23
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v22
          buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
          _v24 = val2.spiral
          _x = _v24
          buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
          _v25 = val2.spline
          _x = _v25
          buff.write(_struct_2i.pack(_x.dimension, _x.degree))
          length = len(_v25.knot)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v25.knot.tostring())
          length = len(_v25.control)
          buff.write(_struct_I.pack(length))
          for val4 in _v25.control:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v26 = val2.poly3
          pass
          buff.write(_struct_d.pack(val2.s))
          _v27 = val2.start_position
          _x = _v27
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_struct_2d.pack(_x.heading, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.boundary is None:
        self.boundary = hdmap_pb_msgs.msg.Polygon()
      if self.subsignal is None:
        self.subsignal = None
      if self.overlap_id is None:
        self.overlap_id = None
      if self.stop_line is None:
        self.stop_line = None
      end = 0
      start = end
      end += 1
      (self.id.id,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundary.point = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.boundary.point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.subsignal = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Subsignal()
        _v28 = val1.id
        start = end
        end += 1
        (_v28.id,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v29 = val1.location
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.subsignal.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.overlap_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.overlap_id.append(val1)
      start = end
      end += 4
      (self.type,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stop_line = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Curve()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.segment = []
        for i in range(0, length):
          val2 = hdmap_pb_msgs.msg.CurveSegment()
          _v30 = val2.line_segment
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v30.point = []
          for i in range(0, length):
            val4 = hdmap_pb_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v30.point.append(val4)
          _v31 = val2.arc
          _v32 = _v31.center
          _x = _v32
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v31
          start = end
          end += 24
          (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
          _v33 = val2.spiral
          _x = _v33
          start = end
          end += 16
          (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
          _v34 = val2.spline
          _x = _v34
          start = end
          end += 8
          (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v34.knot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v34.control = []
          for i in range(0, length):
            val4 = hdmap_pb_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v34.control.append(val4)
          _v35 = val2.poly3
          start = end
          end += 8
          (val2.s,) = _struct_d.unpack(str[start:end])
          _v36 = val2.start_position
          _x = _v36
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = val2
          start = end
          end += 16
          (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
          val1.segment.append(val2)
        self.stop_line.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
_struct_d = struct.Struct("<d")
_struct_i = struct.Struct("<i")
_struct_2d = struct.Struct("<2d")
_struct_2i = struct.Struct("<2i")
_struct_3d = struct.Struct("<3d")
