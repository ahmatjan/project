# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hdmap_pb_msgs/ObjectOverlapInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hdmap_pb_msgs.msg

class ObjectOverlapInfo(genpy.Message):
  _md5sum = "839259b89c01b1fa42a46936f1b66d54"
  _type = "hdmap_pb_msgs/ObjectOverlapInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Id id 
LaneOverlapInfo lane_overlap_info 
SignalOverlapInfo signal_overlap_info 
StopSignOverlapInfo stop_sign_overlap_info 
CrosswalkOverlapInfo crosswalk_overlap_info 
JunctionOverlapInfo junction_overlap_info 

================================================================================
MSG: hdmap_pb_msgs/Id
int8 id 

================================================================================
MSG: hdmap_pb_msgs/LaneOverlapInfo
float64 start_s 
float64 end_s 
bool is_merge 
bool has_precedence 

================================================================================
MSG: hdmap_pb_msgs/SignalOverlapInfo

================================================================================
MSG: hdmap_pb_msgs/StopSignOverlapInfo

================================================================================
MSG: hdmap_pb_msgs/CrosswalkOverlapInfo

================================================================================
MSG: hdmap_pb_msgs/JunctionOverlapInfo
"""
  __slots__ = ['id','lane_overlap_info','signal_overlap_info','stop_sign_overlap_info','crosswalk_overlap_info','junction_overlap_info']
  _slot_types = ['hdmap_pb_msgs/Id','hdmap_pb_msgs/LaneOverlapInfo','hdmap_pb_msgs/SignalOverlapInfo','hdmap_pb_msgs/StopSignOverlapInfo','hdmap_pb_msgs/CrosswalkOverlapInfo','hdmap_pb_msgs/JunctionOverlapInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,lane_overlap_info,signal_overlap_info,stop_sign_overlap_info,crosswalk_overlap_info,junction_overlap_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectOverlapInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.lane_overlap_info is None:
        self.lane_overlap_info = hdmap_pb_msgs.msg.LaneOverlapInfo()
      if self.signal_overlap_info is None:
        self.signal_overlap_info = hdmap_pb_msgs.msg.SignalOverlapInfo()
      if self.stop_sign_overlap_info is None:
        self.stop_sign_overlap_info = hdmap_pb_msgs.msg.StopSignOverlapInfo()
      if self.crosswalk_overlap_info is None:
        self.crosswalk_overlap_info = hdmap_pb_msgs.msg.CrosswalkOverlapInfo()
      if self.junction_overlap_info is None:
        self.junction_overlap_info = hdmap_pb_msgs.msg.JunctionOverlapInfo()
    else:
      self.id = hdmap_pb_msgs.msg.Id()
      self.lane_overlap_info = hdmap_pb_msgs.msg.LaneOverlapInfo()
      self.signal_overlap_info = hdmap_pb_msgs.msg.SignalOverlapInfo()
      self.stop_sign_overlap_info = hdmap_pb_msgs.msg.StopSignOverlapInfo()
      self.crosswalk_overlap_info = hdmap_pb_msgs.msg.CrosswalkOverlapInfo()
      self.junction_overlap_info = hdmap_pb_msgs.msg.JunctionOverlapInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b2d2B.pack(_x.id.id, _x.lane_overlap_info.start_s, _x.lane_overlap_info.end_s, _x.lane_overlap_info.is_merge, _x.lane_overlap_info.has_precedence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.lane_overlap_info is None:
        self.lane_overlap_info = hdmap_pb_msgs.msg.LaneOverlapInfo()
      if self.signal_overlap_info is None:
        self.signal_overlap_info = hdmap_pb_msgs.msg.SignalOverlapInfo()
      if self.stop_sign_overlap_info is None:
        self.stop_sign_overlap_info = hdmap_pb_msgs.msg.StopSignOverlapInfo()
      if self.crosswalk_overlap_info is None:
        self.crosswalk_overlap_info = hdmap_pb_msgs.msg.CrosswalkOverlapInfo()
      if self.junction_overlap_info is None:
        self.junction_overlap_info = hdmap_pb_msgs.msg.JunctionOverlapInfo()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.id.id, _x.lane_overlap_info.start_s, _x.lane_overlap_info.end_s, _x.lane_overlap_info.is_merge, _x.lane_overlap_info.has_precedence,) = _struct_b2d2B.unpack(str[start:end])
      self.lane_overlap_info.is_merge = bool(self.lane_overlap_info.is_merge)
      self.lane_overlap_info.has_precedence = bool(self.lane_overlap_info.has_precedence)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b2d2B.pack(_x.id.id, _x.lane_overlap_info.start_s, _x.lane_overlap_info.end_s, _x.lane_overlap_info.is_merge, _x.lane_overlap_info.has_precedence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.lane_overlap_info is None:
        self.lane_overlap_info = hdmap_pb_msgs.msg.LaneOverlapInfo()
      if self.signal_overlap_info is None:
        self.signal_overlap_info = hdmap_pb_msgs.msg.SignalOverlapInfo()
      if self.stop_sign_overlap_info is None:
        self.stop_sign_overlap_info = hdmap_pb_msgs.msg.StopSignOverlapInfo()
      if self.crosswalk_overlap_info is None:
        self.crosswalk_overlap_info = hdmap_pb_msgs.msg.CrosswalkOverlapInfo()
      if self.junction_overlap_info is None:
        self.junction_overlap_info = hdmap_pb_msgs.msg.JunctionOverlapInfo()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.id.id, _x.lane_overlap_info.start_s, _x.lane_overlap_info.end_s, _x.lane_overlap_info.is_merge, _x.lane_overlap_info.has_precedence,) = _struct_b2d2B.unpack(str[start:end])
      self.lane_overlap_info.is_merge = bool(self.lane_overlap_info.is_merge)
      self.lane_overlap_info.has_precedence = bool(self.lane_overlap_info.has_precedence)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b2d2B = struct.Struct("<b2d2B")
