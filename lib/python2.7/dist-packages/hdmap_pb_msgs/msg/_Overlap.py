# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hdmap_pb_msgs/Overlap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hdmap_pb_msgs.msg

class Overlap(genpy.Message):
  _md5sum = "d69e2c5f45b1dc96ea1b53d225f986e8"
  _type = "hdmap_pb_msgs/Overlap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Id id 
ObjectOverlapInfo[] object 

================================================================================
MSG: hdmap_pb_msgs/Id
int8 id 

================================================================================
MSG: hdmap_pb_msgs/ObjectOverlapInfo
Id id 
LaneOverlapInfo lane_overlap_info 
SignalOverlapInfo signal_overlap_info 
StopSignOverlapInfo stop_sign_overlap_info 
CrosswalkOverlapInfo crosswalk_overlap_info 
JunctionOverlapInfo junction_overlap_info 

================================================================================
MSG: hdmap_pb_msgs/LaneOverlapInfo
float64 start_s 
float64 end_s 
bool is_merge 
bool has_precedence 

================================================================================
MSG: hdmap_pb_msgs/SignalOverlapInfo

================================================================================
MSG: hdmap_pb_msgs/StopSignOverlapInfo

================================================================================
MSG: hdmap_pb_msgs/CrosswalkOverlapInfo

================================================================================
MSG: hdmap_pb_msgs/JunctionOverlapInfo
"""
  __slots__ = ['id','object']
  _slot_types = ['hdmap_pb_msgs/Id','hdmap_pb_msgs/ObjectOverlapInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,object

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Overlap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.object is None:
        self.object = []
    else:
      self.id = hdmap_pb_msgs.msg.Id()
      self.object = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.id.id))
      length = len(self.object)
      buff.write(_struct_I.pack(length))
      for val1 in self.object:
        _v1 = val1.id
        buff.write(_struct_b.pack(_v1.id))
        _v2 = val1.lane_overlap_info
        _x = _v2
        buff.write(_struct_2d2B.pack(_x.start_s, _x.end_s, _x.is_merge, _x.has_precedence))
        _v3 = val1.signal_overlap_info
        pass
        _v4 = val1.stop_sign_overlap_info
        pass
        _v5 = val1.crosswalk_overlap_info
        pass
        _v6 = val1.junction_overlap_info
        pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.object is None:
        self.object = None
      end = 0
      start = end
      end += 1
      (self.id.id,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.ObjectOverlapInfo()
        _v7 = val1.id
        start = end
        end += 1
        (_v7.id,) = _struct_b.unpack(str[start:end])
        _v8 = val1.lane_overlap_info
        _x = _v8
        start = end
        end += 18
        (_x.start_s, _x.end_s, _x.is_merge, _x.has_precedence,) = _struct_2d2B.unpack(str[start:end])
        _v8.is_merge = bool(_v8.is_merge)
        _v8.has_precedence = bool(_v8.has_precedence)
        _v9 = val1.signal_overlap_info
        _v10 = val1.stop_sign_overlap_info
        _v11 = val1.crosswalk_overlap_info
        _v12 = val1.junction_overlap_info
        self.object.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.id.id))
      length = len(self.object)
      buff.write(_struct_I.pack(length))
      for val1 in self.object:
        _v13 = val1.id
        buff.write(_struct_b.pack(_v13.id))
        _v14 = val1.lane_overlap_info
        _x = _v14
        buff.write(_struct_2d2B.pack(_x.start_s, _x.end_s, _x.is_merge, _x.has_precedence))
        _v15 = val1.signal_overlap_info
        pass
        _v16 = val1.stop_sign_overlap_info
        pass
        _v17 = val1.crosswalk_overlap_info
        pass
        _v18 = val1.junction_overlap_info
        pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.object is None:
        self.object = None
      end = 0
      start = end
      end += 1
      (self.id.id,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.ObjectOverlapInfo()
        _v19 = val1.id
        start = end
        end += 1
        (_v19.id,) = _struct_b.unpack(str[start:end])
        _v20 = val1.lane_overlap_info
        _x = _v20
        start = end
        end += 18
        (_x.start_s, _x.end_s, _x.is_merge, _x.has_precedence,) = _struct_2d2B.unpack(str[start:end])
        _v20.is_merge = bool(_v20.is_merge)
        _v20.has_precedence = bool(_v20.has_precedence)
        _v21 = val1.signal_overlap_info
        _v22 = val1.stop_sign_overlap_info
        _v23 = val1.crosswalk_overlap_info
        _v24 = val1.junction_overlap_info
        self.object.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d2B = struct.Struct("<2d2B")
_struct_b = struct.Struct("<b")
