# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hdmap_pb_msgs/Lane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hdmap_pb_msgs.msg

class Lane(genpy.Message):
  _md5sum = "1c727327a059aae36c399385b0171681"
  _type = "hdmap_pb_msgs/Lane"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Id id 
int32 type 
int32 turn 
Curve central_curve 
LaneBoundary left_boundary 
LaneBoundary right_boundary 
float64 width 
float64 length 
float64 speed_limit 
Id[] overlap_id 
Id[] predecessor_id 
Id[] successor_id 
Id[] left_neighbor_forward_lane_id 
Id[] right_neighbor_forward_lane_id 
Id[] left_neighbor_reverse_lane_id 
Id[] right_neighbor_reverse_lane_id 
Id[] stop_sign_id 
Id junction_id 
Id[] crosswalk_id 
Id[] yield_sign_id 
LaneSampleAssociation[] left_sample 
LaneSampleAssociation[] right_sample 

================================================================================
MSG: hdmap_pb_msgs/Id
int8 id 

================================================================================
MSG: hdmap_pb_msgs/Curve
CurveSegment[] segment 

================================================================================
MSG: hdmap_pb_msgs/CurveSegment
LineSegment line_segment 
Arc arc 
Spiral spiral 
Spline spline 
Poly3 poly3 
float64 s 
Point start_position 
float64 heading 
float64 length 

================================================================================
MSG: hdmap_pb_msgs/LineSegment
Point[] point 

================================================================================
MSG: hdmap_pb_msgs/Point
float64 x 
float64 y 
float64 z 

================================================================================
MSG: hdmap_pb_msgs/Arc
Point center 
float64 radius 
float64 start_angle 
float64 end_angle 

================================================================================
MSG: hdmap_pb_msgs/Spiral
float64 curv_start 
float64 curv_end 

================================================================================
MSG: hdmap_pb_msgs/Spline
int32 dimension 
int32 degree 
float64[] knot 
Point[] control 

================================================================================
MSG: hdmap_pb_msgs/Poly3

================================================================================
MSG: hdmap_pb_msgs/LaneBoundary
Curve curve 
int32 type 
float64 length 

================================================================================
MSG: hdmap_pb_msgs/LaneSampleAssociation
float64 s 
float64 width 
"""
  __slots__ = ['id','type','turn','central_curve','left_boundary','right_boundary','width','length','speed_limit','overlap_id','predecessor_id','successor_id','left_neighbor_forward_lane_id','right_neighbor_forward_lane_id','left_neighbor_reverse_lane_id','right_neighbor_reverse_lane_id','stop_sign_id','junction_id','crosswalk_id','yield_sign_id','left_sample','right_sample']
  _slot_types = ['hdmap_pb_msgs/Id','int32','int32','hdmap_pb_msgs/Curve','hdmap_pb_msgs/LaneBoundary','hdmap_pb_msgs/LaneBoundary','float64','float64','float64','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/Id[]','hdmap_pb_msgs/LaneSampleAssociation[]','hdmap_pb_msgs/LaneSampleAssociation[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,type,turn,central_curve,left_boundary,right_boundary,width,length,speed_limit,overlap_id,predecessor_id,successor_id,left_neighbor_forward_lane_id,right_neighbor_forward_lane_id,left_neighbor_reverse_lane_id,right_neighbor_reverse_lane_id,stop_sign_id,junction_id,crosswalk_id,yield_sign_id,left_sample,right_sample

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.type is None:
        self.type = 0
      if self.turn is None:
        self.turn = 0
      if self.central_curve is None:
        self.central_curve = hdmap_pb_msgs.msg.Curve()
      if self.left_boundary is None:
        self.left_boundary = hdmap_pb_msgs.msg.LaneBoundary()
      if self.right_boundary is None:
        self.right_boundary = hdmap_pb_msgs.msg.LaneBoundary()
      if self.width is None:
        self.width = 0.
      if self.length is None:
        self.length = 0.
      if self.speed_limit is None:
        self.speed_limit = 0.
      if self.overlap_id is None:
        self.overlap_id = []
      if self.predecessor_id is None:
        self.predecessor_id = []
      if self.successor_id is None:
        self.successor_id = []
      if self.left_neighbor_forward_lane_id is None:
        self.left_neighbor_forward_lane_id = []
      if self.right_neighbor_forward_lane_id is None:
        self.right_neighbor_forward_lane_id = []
      if self.left_neighbor_reverse_lane_id is None:
        self.left_neighbor_reverse_lane_id = []
      if self.right_neighbor_reverse_lane_id is None:
        self.right_neighbor_reverse_lane_id = []
      if self.stop_sign_id is None:
        self.stop_sign_id = []
      if self.junction_id is None:
        self.junction_id = hdmap_pb_msgs.msg.Id()
      if self.crosswalk_id is None:
        self.crosswalk_id = []
      if self.yield_sign_id is None:
        self.yield_sign_id = []
      if self.left_sample is None:
        self.left_sample = []
      if self.right_sample is None:
        self.right_sample = []
    else:
      self.id = hdmap_pb_msgs.msg.Id()
      self.type = 0
      self.turn = 0
      self.central_curve = hdmap_pb_msgs.msg.Curve()
      self.left_boundary = hdmap_pb_msgs.msg.LaneBoundary()
      self.right_boundary = hdmap_pb_msgs.msg.LaneBoundary()
      self.width = 0.
      self.length = 0.
      self.speed_limit = 0.
      self.overlap_id = []
      self.predecessor_id = []
      self.successor_id = []
      self.left_neighbor_forward_lane_id = []
      self.right_neighbor_forward_lane_id = []
      self.left_neighbor_reverse_lane_id = []
      self.right_neighbor_reverse_lane_id = []
      self.stop_sign_id = []
      self.junction_id = hdmap_pb_msgs.msg.Id()
      self.crosswalk_id = []
      self.yield_sign_id = []
      self.left_sample = []
      self.right_sample = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b2i.pack(_x.id.id, _x.type, _x.turn))
      length = len(self.central_curve.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.central_curve.segment:
        _v1 = val1.line_segment
        length = len(_v1.point)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.point:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.arc
        _v3 = _v2.center
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
        _v4 = val1.spiral
        _x = _v4
        buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
        _v5 = val1.spline
        _x = _v5
        buff.write(_struct_2i.pack(_x.dimension, _x.degree))
        length = len(_v5.knot)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.knot))
        length = len(_v5.control)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.control:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.poly3
        pass
        buff.write(_struct_d.pack(val1.s))
        _v7 = val1.start_position
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.heading, _x.length))
      length = len(self.left_boundary.curve.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_boundary.curve.segment:
        _v8 = val1.line_segment
        length = len(_v8.point)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.point:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = val1.arc
        _v10 = _v9.center
        _x = _v10
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v9
        buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
        _v11 = val1.spiral
        _x = _v11
        buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
        _v12 = val1.spline
        _x = _v12
        buff.write(_struct_2i.pack(_x.dimension, _x.degree))
        length = len(_v12.knot)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v12.knot))
        length = len(_v12.control)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.control:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v13 = val1.poly3
        pass
        buff.write(_struct_d.pack(val1.s))
        _v14 = val1.start_position
        _x = _v14
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.heading, _x.length))
      _x = self
      buff.write(_struct_id.pack(_x.left_boundary.type, _x.left_boundary.length))
      length = len(self.right_boundary.curve.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_boundary.curve.segment:
        _v15 = val1.line_segment
        length = len(_v15.point)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.point:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v16 = val1.arc
        _v17 = _v16.center
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v16
        buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
        _v18 = val1.spiral
        _x = _v18
        buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
        _v19 = val1.spline
        _x = _v19
        buff.write(_struct_2i.pack(_x.dimension, _x.degree))
        length = len(_v19.knot)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v19.knot))
        length = len(_v19.control)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.control:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v20 = val1.poly3
        pass
        buff.write(_struct_d.pack(val1.s))
        _v21 = val1.start_position
        _x = _v21
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.heading, _x.length))
      _x = self
      buff.write(_struct_i4d.pack(_x.right_boundary.type, _x.right_boundary.length, _x.width, _x.length, _x.speed_limit))
      length = len(self.overlap_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.overlap_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.predecessor_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.predecessor_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.successor_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.successor_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.left_neighbor_forward_lane_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_neighbor_forward_lane_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.right_neighbor_forward_lane_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_neighbor_forward_lane_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.left_neighbor_reverse_lane_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_neighbor_reverse_lane_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.right_neighbor_reverse_lane_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_neighbor_reverse_lane_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.stop_sign_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.stop_sign_id:
        buff.write(_struct_b.pack(val1.id))
      buff.write(_struct_b.pack(self.junction_id.id))
      length = len(self.crosswalk_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.crosswalk_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.yield_sign_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.yield_sign_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.left_sample)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_sample:
        _x = val1
        buff.write(_struct_2d.pack(_x.s, _x.width))
      length = len(self.right_sample)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_sample:
        _x = val1
        buff.write(_struct_2d.pack(_x.s, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.central_curve is None:
        self.central_curve = hdmap_pb_msgs.msg.Curve()
      if self.left_boundary is None:
        self.left_boundary = hdmap_pb_msgs.msg.LaneBoundary()
      if self.right_boundary is None:
        self.right_boundary = hdmap_pb_msgs.msg.LaneBoundary()
      if self.overlap_id is None:
        self.overlap_id = None
      if self.predecessor_id is None:
        self.predecessor_id = None
      if self.successor_id is None:
        self.successor_id = None
      if self.left_neighbor_forward_lane_id is None:
        self.left_neighbor_forward_lane_id = None
      if self.right_neighbor_forward_lane_id is None:
        self.right_neighbor_forward_lane_id = None
      if self.left_neighbor_reverse_lane_id is None:
        self.left_neighbor_reverse_lane_id = None
      if self.right_neighbor_reverse_lane_id is None:
        self.right_neighbor_reverse_lane_id = None
      if self.stop_sign_id is None:
        self.stop_sign_id = None
      if self.junction_id is None:
        self.junction_id = hdmap_pb_msgs.msg.Id()
      if self.crosswalk_id is None:
        self.crosswalk_id = None
      if self.yield_sign_id is None:
        self.yield_sign_id = None
      if self.left_sample is None:
        self.left_sample = None
      if self.right_sample is None:
        self.right_sample = None
      end = 0
      _x = self
      start = end
      end += 9
      (_x.id.id, _x.type, _x.turn,) = _struct_b2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.central_curve.segment = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.CurveSegment()
        _v22 = val1.line_segment
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v22.point = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v22.point.append(val3)
        _v23 = val1.arc
        _v24 = _v23.center
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v23
        start = end
        end += 24
        (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
        _v25 = val1.spiral
        _x = _v25
        start = end
        end += 16
        (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
        _v26 = val1.spline
        _x = _v26
        start = end
        end += 8
        (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v26.knot = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v26.control = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v26.control.append(val3)
        _v27 = val1.poly3
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v28 = val1.start_position
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
        self.central_curve.segment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_boundary.curve.segment = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.CurveSegment()
        _v29 = val1.line_segment
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v29.point = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v29.point.append(val3)
        _v30 = val1.arc
        _v31 = _v30.center
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v30
        start = end
        end += 24
        (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
        _v32 = val1.spiral
        _x = _v32
        start = end
        end += 16
        (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
        _v33 = val1.spline
        _x = _v33
        start = end
        end += 8
        (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v33.knot = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v33.control = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v33.control.append(val3)
        _v34 = val1.poly3
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v35 = val1.start_position
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
        self.left_boundary.curve.segment.append(val1)
      _x = self
      start = end
      end += 12
      (_x.left_boundary.type, _x.left_boundary.length,) = _struct_id.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_boundary.curve.segment = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.CurveSegment()
        _v36 = val1.line_segment
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v36.point = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v36.point.append(val3)
        _v37 = val1.arc
        _v38 = _v37.center
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v37
        start = end
        end += 24
        (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
        _v39 = val1.spiral
        _x = _v39
        start = end
        end += 16
        (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
        _v40 = val1.spline
        _x = _v40
        start = end
        end += 8
        (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v40.knot = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v40.control = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v40.control.append(val3)
        _v41 = val1.poly3
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v42 = val1.start_position
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
        self.right_boundary.curve.segment.append(val1)
      _x = self
      start = end
      end += 36
      (_x.right_boundary.type, _x.right_boundary.length, _x.width, _x.length, _x.speed_limit,) = _struct_i4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.overlap_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.overlap_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.predecessor_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.predecessor_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.successor_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.successor_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_neighbor_forward_lane_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.left_neighbor_forward_lane_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_neighbor_forward_lane_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.right_neighbor_forward_lane_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_neighbor_reverse_lane_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.left_neighbor_reverse_lane_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_neighbor_reverse_lane_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.right_neighbor_reverse_lane_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stop_sign_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.stop_sign_id.append(val1)
      start = end
      end += 1
      (self.junction_id.id,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.crosswalk_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.crosswalk_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.yield_sign_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.yield_sign_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_sample = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.LaneSampleAssociation()
        _x = val1
        start = end
        end += 16
        (_x.s, _x.width,) = _struct_2d.unpack(str[start:end])
        self.left_sample.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_sample = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.LaneSampleAssociation()
        _x = val1
        start = end
        end += 16
        (_x.s, _x.width,) = _struct_2d.unpack(str[start:end])
        self.right_sample.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b2i.pack(_x.id.id, _x.type, _x.turn))
      length = len(self.central_curve.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.central_curve.segment:
        _v43 = val1.line_segment
        length = len(_v43.point)
        buff.write(_struct_I.pack(length))
        for val3 in _v43.point:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v44 = val1.arc
        _v45 = _v44.center
        _x = _v45
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v44
        buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
        _v46 = val1.spiral
        _x = _v46
        buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
        _v47 = val1.spline
        _x = _v47
        buff.write(_struct_2i.pack(_x.dimension, _x.degree))
        length = len(_v47.knot)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v47.knot.tostring())
        length = len(_v47.control)
        buff.write(_struct_I.pack(length))
        for val3 in _v47.control:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v48 = val1.poly3
        pass
        buff.write(_struct_d.pack(val1.s))
        _v49 = val1.start_position
        _x = _v49
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.heading, _x.length))
      length = len(self.left_boundary.curve.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_boundary.curve.segment:
        _v50 = val1.line_segment
        length = len(_v50.point)
        buff.write(_struct_I.pack(length))
        for val3 in _v50.point:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v51 = val1.arc
        _v52 = _v51.center
        _x = _v52
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v51
        buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
        _v53 = val1.spiral
        _x = _v53
        buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
        _v54 = val1.spline
        _x = _v54
        buff.write(_struct_2i.pack(_x.dimension, _x.degree))
        length = len(_v54.knot)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v54.knot.tostring())
        length = len(_v54.control)
        buff.write(_struct_I.pack(length))
        for val3 in _v54.control:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v55 = val1.poly3
        pass
        buff.write(_struct_d.pack(val1.s))
        _v56 = val1.start_position
        _x = _v56
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.heading, _x.length))
      _x = self
      buff.write(_struct_id.pack(_x.left_boundary.type, _x.left_boundary.length))
      length = len(self.right_boundary.curve.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_boundary.curve.segment:
        _v57 = val1.line_segment
        length = len(_v57.point)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.point:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v58 = val1.arc
        _v59 = _v58.center
        _x = _v59
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v58
        buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
        _v60 = val1.spiral
        _x = _v60
        buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
        _v61 = val1.spline
        _x = _v61
        buff.write(_struct_2i.pack(_x.dimension, _x.degree))
        length = len(_v61.knot)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v61.knot.tostring())
        length = len(_v61.control)
        buff.write(_struct_I.pack(length))
        for val3 in _v61.control:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v62 = val1.poly3
        pass
        buff.write(_struct_d.pack(val1.s))
        _v63 = val1.start_position
        _x = _v63
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.heading, _x.length))
      _x = self
      buff.write(_struct_i4d.pack(_x.right_boundary.type, _x.right_boundary.length, _x.width, _x.length, _x.speed_limit))
      length = len(self.overlap_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.overlap_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.predecessor_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.predecessor_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.successor_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.successor_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.left_neighbor_forward_lane_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_neighbor_forward_lane_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.right_neighbor_forward_lane_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_neighbor_forward_lane_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.left_neighbor_reverse_lane_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_neighbor_reverse_lane_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.right_neighbor_reverse_lane_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_neighbor_reverse_lane_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.stop_sign_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.stop_sign_id:
        buff.write(_struct_b.pack(val1.id))
      buff.write(_struct_b.pack(self.junction_id.id))
      length = len(self.crosswalk_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.crosswalk_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.yield_sign_id)
      buff.write(_struct_I.pack(length))
      for val1 in self.yield_sign_id:
        buff.write(_struct_b.pack(val1.id))
      length = len(self.left_sample)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_sample:
        _x = val1
        buff.write(_struct_2d.pack(_x.s, _x.width))
      length = len(self.right_sample)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_sample:
        _x = val1
        buff.write(_struct_2d.pack(_x.s, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.id is None:
        self.id = hdmap_pb_msgs.msg.Id()
      if self.central_curve is None:
        self.central_curve = hdmap_pb_msgs.msg.Curve()
      if self.left_boundary is None:
        self.left_boundary = hdmap_pb_msgs.msg.LaneBoundary()
      if self.right_boundary is None:
        self.right_boundary = hdmap_pb_msgs.msg.LaneBoundary()
      if self.overlap_id is None:
        self.overlap_id = None
      if self.predecessor_id is None:
        self.predecessor_id = None
      if self.successor_id is None:
        self.successor_id = None
      if self.left_neighbor_forward_lane_id is None:
        self.left_neighbor_forward_lane_id = None
      if self.right_neighbor_forward_lane_id is None:
        self.right_neighbor_forward_lane_id = None
      if self.left_neighbor_reverse_lane_id is None:
        self.left_neighbor_reverse_lane_id = None
      if self.right_neighbor_reverse_lane_id is None:
        self.right_neighbor_reverse_lane_id = None
      if self.stop_sign_id is None:
        self.stop_sign_id = None
      if self.junction_id is None:
        self.junction_id = hdmap_pb_msgs.msg.Id()
      if self.crosswalk_id is None:
        self.crosswalk_id = None
      if self.yield_sign_id is None:
        self.yield_sign_id = None
      if self.left_sample is None:
        self.left_sample = None
      if self.right_sample is None:
        self.right_sample = None
      end = 0
      _x = self
      start = end
      end += 9
      (_x.id.id, _x.type, _x.turn,) = _struct_b2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.central_curve.segment = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.CurveSegment()
        _v64 = val1.line_segment
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v64.point = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v64.point.append(val3)
        _v65 = val1.arc
        _v66 = _v65.center
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v65
        start = end
        end += 24
        (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
        _v67 = val1.spiral
        _x = _v67
        start = end
        end += 16
        (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
        _v68 = val1.spline
        _x = _v68
        start = end
        end += 8
        (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v68.knot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v68.control = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v68.control.append(val3)
        _v69 = val1.poly3
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v70 = val1.start_position
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
        self.central_curve.segment.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_boundary.curve.segment = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.CurveSegment()
        _v71 = val1.line_segment
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v71.point = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v71.point.append(val3)
        _v72 = val1.arc
        _v73 = _v72.center
        _x = _v73
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v72
        start = end
        end += 24
        (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
        _v74 = val1.spiral
        _x = _v74
        start = end
        end += 16
        (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
        _v75 = val1.spline
        _x = _v75
        start = end
        end += 8
        (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v75.knot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v75.control = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v75.control.append(val3)
        _v76 = val1.poly3
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v77 = val1.start_position
        _x = _v77
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
        self.left_boundary.curve.segment.append(val1)
      _x = self
      start = end
      end += 12
      (_x.left_boundary.type, _x.left_boundary.length,) = _struct_id.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_boundary.curve.segment = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.CurveSegment()
        _v78 = val1.line_segment
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v78.point = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v78.point.append(val3)
        _v79 = val1.arc
        _v80 = _v79.center
        _x = _v80
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v79
        start = end
        end += 24
        (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
        _v81 = val1.spiral
        _x = _v81
        start = end
        end += 16
        (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
        _v82 = val1.spline
        _x = _v82
        start = end
        end += 8
        (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v82.knot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v82.control = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v82.control.append(val3)
        _v83 = val1.poly3
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v84 = val1.start_position
        _x = _v84
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
        self.right_boundary.curve.segment.append(val1)
      _x = self
      start = end
      end += 36
      (_x.right_boundary.type, _x.right_boundary.length, _x.width, _x.length, _x.speed_limit,) = _struct_i4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.overlap_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.overlap_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.predecessor_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.predecessor_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.successor_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.successor_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_neighbor_forward_lane_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.left_neighbor_forward_lane_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_neighbor_forward_lane_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.right_neighbor_forward_lane_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_neighbor_reverse_lane_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.left_neighbor_reverse_lane_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_neighbor_reverse_lane_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.right_neighbor_reverse_lane_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stop_sign_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.stop_sign_id.append(val1)
      start = end
      end += 1
      (self.junction_id.id,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.crosswalk_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.crosswalk_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.yield_sign_id = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.Id()
        start = end
        end += 1
        (val1.id,) = _struct_b.unpack(str[start:end])
        self.yield_sign_id.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_sample = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.LaneSampleAssociation()
        _x = val1
        start = end
        end += 16
        (_x.s, _x.width,) = _struct_2d.unpack(str[start:end])
        self.left_sample.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_sample = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.LaneSampleAssociation()
        _x = val1
        start = end
        end += 16
        (_x.s, _x.width,) = _struct_2d.unpack(str[start:end])
        self.right_sample.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
_struct_d = struct.Struct("<d")
_struct_i4d = struct.Struct("<i4d")
_struct_2i = struct.Struct("<2i")
_struct_2d = struct.Struct("<2d")
_struct_b2i = struct.Struct("<b2i")
_struct_id = struct.Struct("<id")
_struct_3d = struct.Struct("<3d")
