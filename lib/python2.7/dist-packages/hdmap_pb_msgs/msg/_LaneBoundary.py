# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hdmap_pb_msgs/LaneBoundary.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hdmap_pb_msgs.msg

class LaneBoundary(genpy.Message):
  _md5sum = "9eb3bfaf6ce2ab83411a6c2b48625d75"
  _type = "hdmap_pb_msgs/LaneBoundary"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Curve curve 
int32 type 
float64 length 

================================================================================
MSG: hdmap_pb_msgs/Curve
CurveSegment[] segment 

================================================================================
MSG: hdmap_pb_msgs/CurveSegment
LineSegment line_segment 
Arc arc 
Spiral spiral 
Spline spline 
Poly3 poly3 
float64 s 
Point start_position 
float64 heading 
float64 length 

================================================================================
MSG: hdmap_pb_msgs/LineSegment
Point[] point 

================================================================================
MSG: hdmap_pb_msgs/Point
float64 x 
float64 y 
float64 z 

================================================================================
MSG: hdmap_pb_msgs/Arc
Point center 
float64 radius 
float64 start_angle 
float64 end_angle 

================================================================================
MSG: hdmap_pb_msgs/Spiral
float64 curv_start 
float64 curv_end 

================================================================================
MSG: hdmap_pb_msgs/Spline
int32 dimension 
int32 degree 
float64[] knot 
Point[] control 

================================================================================
MSG: hdmap_pb_msgs/Poly3
"""
  __slots__ = ['curve','type','length']
  _slot_types = ['hdmap_pb_msgs/Curve','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       curve,type,length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneBoundary, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.curve is None:
        self.curve = hdmap_pb_msgs.msg.Curve()
      if self.type is None:
        self.type = 0
      if self.length is None:
        self.length = 0.
    else:
      self.curve = hdmap_pb_msgs.msg.Curve()
      self.type = 0
      self.length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.curve.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.curve.segment:
        _v1 = val1.line_segment
        length = len(_v1.point)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.point:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.arc
        _v3 = _v2.center
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
        _v4 = val1.spiral
        _x = _v4
        buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
        _v5 = val1.spline
        _x = _v5
        buff.write(_struct_2i.pack(_x.dimension, _x.degree))
        length = len(_v5.knot)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v5.knot))
        length = len(_v5.control)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.control:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.poly3
        pass
        buff.write(_struct_d.pack(val1.s))
        _v7 = val1.start_position
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.heading, _x.length))
      _x = self
      buff.write(_struct_id.pack(_x.type, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.curve is None:
        self.curve = hdmap_pb_msgs.msg.Curve()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.curve.segment = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.CurveSegment()
        _v8 = val1.line_segment
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v8.point = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v8.point.append(val3)
        _v9 = val1.arc
        _v10 = _v9.center
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v9
        start = end
        end += 24
        (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
        _v11 = val1.spiral
        _x = _v11
        start = end
        end += 16
        (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
        _v12 = val1.spline
        _x = _v12
        start = end
        end += 8
        (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v12.knot = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v12.control = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v12.control.append(val3)
        _v13 = val1.poly3
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v14 = val1.start_position
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
        self.curve.segment.append(val1)
      _x = self
      start = end
      end += 12
      (_x.type, _x.length,) = _struct_id.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.curve.segment)
      buff.write(_struct_I.pack(length))
      for val1 in self.curve.segment:
        _v15 = val1.line_segment
        length = len(_v15.point)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.point:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v16 = val1.arc
        _v17 = _v16.center
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v16
        buff.write(_struct_3d.pack(_x.radius, _x.start_angle, _x.end_angle))
        _v18 = val1.spiral
        _x = _v18
        buff.write(_struct_2d.pack(_x.curv_start, _x.curv_end))
        _v19 = val1.spline
        _x = _v19
        buff.write(_struct_2i.pack(_x.dimension, _x.degree))
        length = len(_v19.knot)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v19.knot.tostring())
        length = len(_v19.control)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.control:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v20 = val1.poly3
        pass
        buff.write(_struct_d.pack(val1.s))
        _v21 = val1.start_position
        _x = _v21
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.heading, _x.length))
      _x = self
      buff.write(_struct_id.pack(_x.type, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.curve is None:
        self.curve = hdmap_pb_msgs.msg.Curve()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.curve.segment = []
      for i in range(0, length):
        val1 = hdmap_pb_msgs.msg.CurveSegment()
        _v22 = val1.line_segment
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v22.point = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v22.point.append(val3)
        _v23 = val1.arc
        _v24 = _v23.center
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v23
        start = end
        end += 24
        (_x.radius, _x.start_angle, _x.end_angle,) = _struct_3d.unpack(str[start:end])
        _v25 = val1.spiral
        _x = _v25
        start = end
        end += 16
        (_x.curv_start, _x.curv_end,) = _struct_2d.unpack(str[start:end])
        _v26 = val1.spline
        _x = _v26
        start = end
        end += 8
        (_x.dimension, _x.degree,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v26.knot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v26.control = []
        for i in range(0, length):
          val3 = hdmap_pb_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v26.control.append(val3)
        _v27 = val1.poly3
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v28 = val1.start_position
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.heading, _x.length,) = _struct_2d.unpack(str[start:end])
        self.curve.segment.append(val1)
      _x = self
      start = end
      end += 12
      (_x.type, _x.length,) = _struct_id.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_d = struct.Struct("<d")
_struct_id = struct.Struct("<id")
_struct_2i = struct.Struct("<2i")
_struct_3d = struct.Struct("<3d")
