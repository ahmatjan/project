# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from decision_pb_msgs/DecisionResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import header_pb_msgs.msg
import perception_pb_msgs.msg
import decision_pb_msgs.msg
import prediction_pb_msgs.msg

class DecisionResult(genpy.Message):
  _md5sum = "d8619ebeedaa9efa345046e0820c13b1"
  _type = "decision_pb_msgs/DecisionResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """header_pb_msgs/Header header 
ObjectDecisions object_decision 
MainDecision main_decision 

================================================================================
MSG: header_pb_msgs/Header
float64 timestamp_sec 
string module_name 
uint32 sequence_num 

================================================================================
MSG: decision_pb_msgs/ObjectDecisions
ObjectDecision[] decision 

================================================================================
MSG: decision_pb_msgs/ObjectDecision
prediction_pb_msgs/PredictionObstacle prediction 
string id 
int32 type 
ObjectDecisionType decision 

================================================================================
MSG: prediction_pb_msgs/PredictionObstacle
perception_pb_msgs/PerceptionObstacle perception_obstacle 
float64 time_stamp 
float64 predicted_period 
Trajectory[] trajectory 

================================================================================
MSG: perception_pb_msgs/PerceptionObstacle
int32 id 
Point position 
float64 theta 
Point velocity 
float64 length 
float64 width 
float64 height 
Point[] polygon_point 
float64 tracking_time 
int32 type 
float64 timestamp 

================================================================================
MSG: perception_pb_msgs/Point
float64 x 
float64 y 
float64 z 

================================================================================
MSG: prediction_pb_msgs/Trajectory
float64 probability 
TrajectoryPoint[] trajectory_point 

================================================================================
MSG: prediction_pb_msgs/TrajectoryPoint
float64 x 
float64 y 
float64 z 
float64 velocity 
float64 t 
float64 heading 

================================================================================
MSG: decision_pb_msgs/ObjectDecisionType
ObjectIgnore ignore 
ObjectStop stop 
ObjectFollow follow 
ObjectYield yieldX 
ObjectOvertake overtake 
ObjectNudge nudge 
ObjectSidePass sidepass 

================================================================================
MSG: decision_pb_msgs/ObjectIgnore

================================================================================
MSG: decision_pb_msgs/ObjectStop
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/Range
float64 start 
float64 end 

================================================================================
MSG: decision_pb_msgs/ObjectFollow
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectYield
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectOvertake
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectNudge
float64 distance_l 
int32 type 
Range preferred_distance_l 

================================================================================
MSG: decision_pb_msgs/ObjectSidePass
float64 distance_s 
Range preferred_distance_s 
int32 type 

================================================================================
MSG: decision_pb_msgs/MainDecision
MainCruise cruise 
MainStop stop 
MainEmergencyStop estop 
MainChangeLane change_lane 
MainMissionComplete mission_complete 
MainNotReady not_ready 
TargetLane[] target_lane 

================================================================================
MSG: decision_pb_msgs/MainCruise

================================================================================
MSG: decision_pb_msgs/MainStop
StopLine enforced_line 
StopLine preferred_start 
StopLine preferred_end 
string reason 

================================================================================
MSG: decision_pb_msgs/StopLine
string lane_id 
float64 distance_s 

================================================================================
MSG: decision_pb_msgs/MainEmergencyStop
string reason 

================================================================================
MSG: decision_pb_msgs/MainChangeLane
int32 type 

================================================================================
MSG: decision_pb_msgs/MainMissionComplete

================================================================================
MSG: decision_pb_msgs/MainNotReady
string reason 

================================================================================
MSG: decision_pb_msgs/TargetLane
string id 
float64 start_s 
float64 end_s 
float64 speed_limit 
"""
  __slots__ = ['header','object_decision','main_decision']
  _slot_types = ['header_pb_msgs/Header','decision_pb_msgs/ObjectDecisions','decision_pb_msgs/MainDecision']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,object_decision,main_decision

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DecisionResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.object_decision is None:
        self.object_decision = decision_pb_msgs.msg.ObjectDecisions()
      if self.main_decision is None:
        self.main_decision = decision_pb_msgs.msg.MainDecision()
    else:
      self.header = header_pb_msgs.msg.Header()
      self.object_decision = decision_pb_msgs.msg.ObjectDecisions()
      self.main_decision = decision_pb_msgs.msg.MainDecision()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.header.sequence_num))
      length = len(self.object_decision.decision)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_decision.decision:
        _v1 = val1.prediction
        _v2 = _v1.perception_obstacle
        buff.write(_struct_i.pack(_v2.id))
        _v3 = _v2.position
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(_v2.theta))
        _v4 = _v2.velocity
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_struct_3d.pack(_x.length, _x.width, _x.height))
        length = len(_v2.polygon_point)
        buff.write(_struct_I.pack(length))
        for val4 in _v2.polygon_point:
          _x = val4
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_struct_did.pack(_x.tracking_time, _x.type, _x.timestamp))
        _x = _v1
        buff.write(_struct_2d.pack(_x.time_stamp, _x.predicted_period))
        length = len(_v1.trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.trajectory:
          buff.write(_struct_d.pack(val3.probability))
          length = len(val3.trajectory_point)
          buff.write(_struct_I.pack(length))
          for val4 in val3.trajectory_point:
            _x = val4
            buff.write(_struct_6d.pack(_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v5 = val1.decision
        _v6 = _v5.ignore
        pass
        _v7 = _v5.stop
        buff.write(_struct_d.pack(_v7.distance_s))
        _v8 = _v7.preferred_distance_s
        _x = _v8
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v9 = _v5.follow
        buff.write(_struct_d.pack(_v9.distance_s))
        _v10 = _v9.preferred_distance_s
        _x = _v10
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v11 = _v5.yieldX
        buff.write(_struct_d.pack(_v11.distance_s))
        _v12 = _v11.preferred_distance_s
        _x = _v12
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v13 = _v5.overtake
        buff.write(_struct_d.pack(_v13.distance_s))
        _v14 = _v13.preferred_distance_s
        _x = _v14
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v15 = _v5.nudge
        _x = _v15
        buff.write(_struct_di.pack(_x.distance_l, _x.type))
        _v16 = _v15.preferred_distance_l
        _x = _v16
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v17 = _v5.sidepass
        buff.write(_struct_d.pack(_v17.distance_s))
        _v18 = _v17.preferred_distance_s
        _x = _v18
        buff.write(_struct_2d.pack(_x.start, _x.end))
        buff.write(_struct_i.pack(_v17.type))
      _x = self.main_decision.stop.enforced_line.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.main_decision.stop.enforced_line.distance_s))
      _x = self.main_decision.stop.preferred_start.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.main_decision.stop.preferred_start.distance_s))
      _x = self.main_decision.stop.preferred_end.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.main_decision.stop.preferred_end.distance_s))
      _x = self.main_decision.stop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.main_decision.estop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.main_decision.change_lane.type))
      _x = self.main_decision.not_ready.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.main_decision.target_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.main_decision.target_lane:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3d.pack(_x.start_s, _x.end_s, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.object_decision is None:
        self.object_decision = decision_pb_msgs.msg.ObjectDecisions()
      if self.main_decision is None:
        self.main_decision = decision_pb_msgs.msg.MainDecision()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (self.header.sequence_num,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_decision.decision = []
      for i in range(0, length):
        val1 = decision_pb_msgs.msg.ObjectDecision()
        _v19 = val1.prediction
        _v20 = _v19.perception_obstacle
        start = end
        end += 4
        (_v20.id,) = _struct_i.unpack(str[start:end])
        _v21 = _v20.position
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (_v20.theta,) = _struct_d.unpack(str[start:end])
        _v22 = _v20.velocity
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v20
        start = end
        end += 24
        (_x.length, _x.width, _x.height,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v20.polygon_point = []
        for i in range(0, length):
          val4 = perception_pb_msgs.msg.Point()
          _x = val4
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v20.polygon_point.append(val4)
        _x = _v20
        start = end
        end += 20
        (_x.tracking_time, _x.type, _x.timestamp,) = _struct_did.unpack(str[start:end])
        _x = _v19
        start = end
        end += 16
        (_x.time_stamp, _x.predicted_period,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v19.trajectory = []
        for i in range(0, length):
          val3 = prediction_pb_msgs.msg.Trajectory()
          start = end
          end += 8
          (val3.probability,) = _struct_d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.trajectory_point = []
          for i in range(0, length):
            val4 = prediction_pb_msgs.msg.TrajectoryPoint()
            _x = val4
            start = end
            end += 48
            (_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading,) = _struct_6d.unpack(str[start:end])
            val3.trajectory_point.append(val4)
          _v19.trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v23 = val1.decision
        _v24 = _v23.ignore
        _v25 = _v23.stop
        start = end
        end += 8
        (_v25.distance_s,) = _struct_d.unpack(str[start:end])
        _v26 = _v25.preferred_distance_s
        _x = _v26
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v27 = _v23.follow
        start = end
        end += 8
        (_v27.distance_s,) = _struct_d.unpack(str[start:end])
        _v28 = _v27.preferred_distance_s
        _x = _v28
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v29 = _v23.yieldX
        start = end
        end += 8
        (_v29.distance_s,) = _struct_d.unpack(str[start:end])
        _v30 = _v29.preferred_distance_s
        _x = _v30
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v31 = _v23.overtake
        start = end
        end += 8
        (_v31.distance_s,) = _struct_d.unpack(str[start:end])
        _v32 = _v31.preferred_distance_s
        _x = _v32
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v33 = _v23.nudge
        _x = _v33
        start = end
        end += 12
        (_x.distance_l, _x.type,) = _struct_di.unpack(str[start:end])
        _v34 = _v33.preferred_distance_l
        _x = _v34
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v35 = _v23.sidepass
        start = end
        end += 8
        (_v35.distance_s,) = _struct_d.unpack(str[start:end])
        _v36 = _v35.preferred_distance_s
        _x = _v36
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (_v35.type,) = _struct_i.unpack(str[start:end])
        self.object_decision.decision.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.stop.enforced_line.lane_id = str[start:end].decode('utf-8')
      else:
        self.main_decision.stop.enforced_line.lane_id = str[start:end]
      start = end
      end += 8
      (self.main_decision.stop.enforced_line.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.stop.preferred_start.lane_id = str[start:end].decode('utf-8')
      else:
        self.main_decision.stop.preferred_start.lane_id = str[start:end]
      start = end
      end += 8
      (self.main_decision.stop.preferred_start.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.stop.preferred_end.lane_id = str[start:end].decode('utf-8')
      else:
        self.main_decision.stop.preferred_end.lane_id = str[start:end]
      start = end
      end += 8
      (self.main_decision.stop.preferred_end.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.stop.reason = str[start:end].decode('utf-8')
      else:
        self.main_decision.stop.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.estop.reason = str[start:end].decode('utf-8')
      else:
        self.main_decision.estop.reason = str[start:end]
      start = end
      end += 4
      (self.main_decision.change_lane.type,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.not_ready.reason = str[start:end].decode('utf-8')
      else:
        self.main_decision.not_ready.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.main_decision.target_lane = []
      for i in range(0, length):
        val1 = decision_pb_msgs.msg.TargetLane()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.start_s, _x.end_s, _x.speed_limit,) = _struct_3d.unpack(str[start:end])
        self.main_decision.target_lane.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.header.sequence_num))
      length = len(self.object_decision.decision)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_decision.decision:
        _v37 = val1.prediction
        _v38 = _v37.perception_obstacle
        buff.write(_struct_i.pack(_v38.id))
        _v39 = _v38.position
        _x = _v39
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(_v38.theta))
        _v40 = _v38.velocity
        _x = _v40
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v38
        buff.write(_struct_3d.pack(_x.length, _x.width, _x.height))
        length = len(_v38.polygon_point)
        buff.write(_struct_I.pack(length))
        for val4 in _v38.polygon_point:
          _x = val4
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v38
        buff.write(_struct_did.pack(_x.tracking_time, _x.type, _x.timestamp))
        _x = _v37
        buff.write(_struct_2d.pack(_x.time_stamp, _x.predicted_period))
        length = len(_v37.trajectory)
        buff.write(_struct_I.pack(length))
        for val3 in _v37.trajectory:
          buff.write(_struct_d.pack(val3.probability))
          length = len(val3.trajectory_point)
          buff.write(_struct_I.pack(length))
          for val4 in val3.trajectory_point:
            _x = val4
            buff.write(_struct_6d.pack(_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v41 = val1.decision
        _v42 = _v41.ignore
        pass
        _v43 = _v41.stop
        buff.write(_struct_d.pack(_v43.distance_s))
        _v44 = _v43.preferred_distance_s
        _x = _v44
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v45 = _v41.follow
        buff.write(_struct_d.pack(_v45.distance_s))
        _v46 = _v45.preferred_distance_s
        _x = _v46
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v47 = _v41.yieldX
        buff.write(_struct_d.pack(_v47.distance_s))
        _v48 = _v47.preferred_distance_s
        _x = _v48
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v49 = _v41.overtake
        buff.write(_struct_d.pack(_v49.distance_s))
        _v50 = _v49.preferred_distance_s
        _x = _v50
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v51 = _v41.nudge
        _x = _v51
        buff.write(_struct_di.pack(_x.distance_l, _x.type))
        _v52 = _v51.preferred_distance_l
        _x = _v52
        buff.write(_struct_2d.pack(_x.start, _x.end))
        _v53 = _v41.sidepass
        buff.write(_struct_d.pack(_v53.distance_s))
        _v54 = _v53.preferred_distance_s
        _x = _v54
        buff.write(_struct_2d.pack(_x.start, _x.end))
        buff.write(_struct_i.pack(_v53.type))
      _x = self.main_decision.stop.enforced_line.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.main_decision.stop.enforced_line.distance_s))
      _x = self.main_decision.stop.preferred_start.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.main_decision.stop.preferred_start.distance_s))
      _x = self.main_decision.stop.preferred_end.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.main_decision.stop.preferred_end.distance_s))
      _x = self.main_decision.stop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.main_decision.estop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.main_decision.change_lane.type))
      _x = self.main_decision.not_ready.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.main_decision.target_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.main_decision.target_lane:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3d.pack(_x.start_s, _x.end_s, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.object_decision is None:
        self.object_decision = decision_pb_msgs.msg.ObjectDecisions()
      if self.main_decision is None:
        self.main_decision = decision_pb_msgs.msg.MainDecision()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (self.header.sequence_num,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_decision.decision = []
      for i in range(0, length):
        val1 = decision_pb_msgs.msg.ObjectDecision()
        _v55 = val1.prediction
        _v56 = _v55.perception_obstacle
        start = end
        end += 4
        (_v56.id,) = _struct_i.unpack(str[start:end])
        _v57 = _v56.position
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (_v56.theta,) = _struct_d.unpack(str[start:end])
        _v58 = _v56.velocity
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v56
        start = end
        end += 24
        (_x.length, _x.width, _x.height,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v56.polygon_point = []
        for i in range(0, length):
          val4 = perception_pb_msgs.msg.Point()
          _x = val4
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v56.polygon_point.append(val4)
        _x = _v56
        start = end
        end += 20
        (_x.tracking_time, _x.type, _x.timestamp,) = _struct_did.unpack(str[start:end])
        _x = _v55
        start = end
        end += 16
        (_x.time_stamp, _x.predicted_period,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v55.trajectory = []
        for i in range(0, length):
          val3 = prediction_pb_msgs.msg.Trajectory()
          start = end
          end += 8
          (val3.probability,) = _struct_d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.trajectory_point = []
          for i in range(0, length):
            val4 = prediction_pb_msgs.msg.TrajectoryPoint()
            _x = val4
            start = end
            end += 48
            (_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading,) = _struct_6d.unpack(str[start:end])
            val3.trajectory_point.append(val4)
          _v55.trajectory.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v59 = val1.decision
        _v60 = _v59.ignore
        _v61 = _v59.stop
        start = end
        end += 8
        (_v61.distance_s,) = _struct_d.unpack(str[start:end])
        _v62 = _v61.preferred_distance_s
        _x = _v62
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v63 = _v59.follow
        start = end
        end += 8
        (_v63.distance_s,) = _struct_d.unpack(str[start:end])
        _v64 = _v63.preferred_distance_s
        _x = _v64
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v65 = _v59.yieldX
        start = end
        end += 8
        (_v65.distance_s,) = _struct_d.unpack(str[start:end])
        _v66 = _v65.preferred_distance_s
        _x = _v66
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v67 = _v59.overtake
        start = end
        end += 8
        (_v67.distance_s,) = _struct_d.unpack(str[start:end])
        _v68 = _v67.preferred_distance_s
        _x = _v68
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v69 = _v59.nudge
        _x = _v69
        start = end
        end += 12
        (_x.distance_l, _x.type,) = _struct_di.unpack(str[start:end])
        _v70 = _v69.preferred_distance_l
        _x = _v70
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        _v71 = _v59.sidepass
        start = end
        end += 8
        (_v71.distance_s,) = _struct_d.unpack(str[start:end])
        _v72 = _v71.preferred_distance_s
        _x = _v72
        start = end
        end += 16
        (_x.start, _x.end,) = _struct_2d.unpack(str[start:end])
        start = end
        end += 4
        (_v71.type,) = _struct_i.unpack(str[start:end])
        self.object_decision.decision.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.stop.enforced_line.lane_id = str[start:end].decode('utf-8')
      else:
        self.main_decision.stop.enforced_line.lane_id = str[start:end]
      start = end
      end += 8
      (self.main_decision.stop.enforced_line.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.stop.preferred_start.lane_id = str[start:end].decode('utf-8')
      else:
        self.main_decision.stop.preferred_start.lane_id = str[start:end]
      start = end
      end += 8
      (self.main_decision.stop.preferred_start.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.stop.preferred_end.lane_id = str[start:end].decode('utf-8')
      else:
        self.main_decision.stop.preferred_end.lane_id = str[start:end]
      start = end
      end += 8
      (self.main_decision.stop.preferred_end.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.stop.reason = str[start:end].decode('utf-8')
      else:
        self.main_decision.stop.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.estop.reason = str[start:end].decode('utf-8')
      else:
        self.main_decision.estop.reason = str[start:end]
      start = end
      end += 4
      (self.main_decision.change_lane.type,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.not_ready.reason = str[start:end].decode('utf-8')
      else:
        self.main_decision.not_ready.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.main_decision.target_lane = []
      for i in range(0, length):
        val1 = decision_pb_msgs.msg.TargetLane()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.start_s, _x.end_s, _x.speed_limit,) = _struct_3d.unpack(str[start:end])
        self.main_decision.target_lane.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
_struct_d = struct.Struct("<d")
_struct_di = struct.Struct("<di")
_struct_2d = struct.Struct("<2d")
_struct_i = struct.Struct("<i")
_struct_did = struct.Struct("<did")
_struct_3d = struct.Struct("<3d")
