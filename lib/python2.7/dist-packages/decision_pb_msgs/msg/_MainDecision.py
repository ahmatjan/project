# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from decision_pb_msgs/MainDecision.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import decision_pb_msgs.msg

class MainDecision(genpy.Message):
  _md5sum = "e968a6f5c0bd5824f0c8df13a58bf201"
  _type = "decision_pb_msgs/MainDecision"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """MainCruise cruise 
MainStop stop 
MainEmergencyStop estop 
MainChangeLane change_lane 
MainMissionComplete mission_complete 
MainNotReady not_ready 
TargetLane[] target_lane 

================================================================================
MSG: decision_pb_msgs/MainCruise

================================================================================
MSG: decision_pb_msgs/MainStop
StopLine enforced_line 
StopLine preferred_start 
StopLine preferred_end 
string reason 

================================================================================
MSG: decision_pb_msgs/StopLine
string lane_id 
float64 distance_s 

================================================================================
MSG: decision_pb_msgs/MainEmergencyStop
string reason 

================================================================================
MSG: decision_pb_msgs/MainChangeLane
int32 type 

================================================================================
MSG: decision_pb_msgs/MainMissionComplete

================================================================================
MSG: decision_pb_msgs/MainNotReady
string reason 

================================================================================
MSG: decision_pb_msgs/TargetLane
string id 
float64 start_s 
float64 end_s 
float64 speed_limit 
"""
  __slots__ = ['cruise','stop','estop','change_lane','mission_complete','not_ready','target_lane']
  _slot_types = ['decision_pb_msgs/MainCruise','decision_pb_msgs/MainStop','decision_pb_msgs/MainEmergencyStop','decision_pb_msgs/MainChangeLane','decision_pb_msgs/MainMissionComplete','decision_pb_msgs/MainNotReady','decision_pb_msgs/TargetLane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cruise,stop,estop,change_lane,mission_complete,not_ready,target_lane

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MainDecision, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cruise is None:
        self.cruise = decision_pb_msgs.msg.MainCruise()
      if self.stop is None:
        self.stop = decision_pb_msgs.msg.MainStop()
      if self.estop is None:
        self.estop = decision_pb_msgs.msg.MainEmergencyStop()
      if self.change_lane is None:
        self.change_lane = decision_pb_msgs.msg.MainChangeLane()
      if self.mission_complete is None:
        self.mission_complete = decision_pb_msgs.msg.MainMissionComplete()
      if self.not_ready is None:
        self.not_ready = decision_pb_msgs.msg.MainNotReady()
      if self.target_lane is None:
        self.target_lane = []
    else:
      self.cruise = decision_pb_msgs.msg.MainCruise()
      self.stop = decision_pb_msgs.msg.MainStop()
      self.estop = decision_pb_msgs.msg.MainEmergencyStop()
      self.change_lane = decision_pb_msgs.msg.MainChangeLane()
      self.mission_complete = decision_pb_msgs.msg.MainMissionComplete()
      self.not_ready = decision_pb_msgs.msg.MainNotReady()
      self.target_lane = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.stop.enforced_line.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.stop.enforced_line.distance_s))
      _x = self.stop.preferred_start.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.stop.preferred_start.distance_s))
      _x = self.stop.preferred_end.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.stop.preferred_end.distance_s))
      _x = self.stop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.estop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.change_lane.type))
      _x = self.not_ready.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.target_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.target_lane:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3d.pack(_x.start_s, _x.end_s, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cruise is None:
        self.cruise = decision_pb_msgs.msg.MainCruise()
      if self.stop is None:
        self.stop = decision_pb_msgs.msg.MainStop()
      if self.estop is None:
        self.estop = decision_pb_msgs.msg.MainEmergencyStop()
      if self.change_lane is None:
        self.change_lane = decision_pb_msgs.msg.MainChangeLane()
      if self.mission_complete is None:
        self.mission_complete = decision_pb_msgs.msg.MainMissionComplete()
      if self.not_ready is None:
        self.not_ready = decision_pb_msgs.msg.MainNotReady()
      if self.target_lane is None:
        self.target_lane = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stop.enforced_line.lane_id = str[start:end].decode('utf-8')
      else:
        self.stop.enforced_line.lane_id = str[start:end]
      start = end
      end += 8
      (self.stop.enforced_line.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stop.preferred_start.lane_id = str[start:end].decode('utf-8')
      else:
        self.stop.preferred_start.lane_id = str[start:end]
      start = end
      end += 8
      (self.stop.preferred_start.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stop.preferred_end.lane_id = str[start:end].decode('utf-8')
      else:
        self.stop.preferred_end.lane_id = str[start:end]
      start = end
      end += 8
      (self.stop.preferred_end.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stop.reason = str[start:end].decode('utf-8')
      else:
        self.stop.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estop.reason = str[start:end].decode('utf-8')
      else:
        self.estop.reason = str[start:end]
      start = end
      end += 4
      (self.change_lane.type,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.not_ready.reason = str[start:end].decode('utf-8')
      else:
        self.not_ready.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target_lane = []
      for i in range(0, length):
        val1 = decision_pb_msgs.msg.TargetLane()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.start_s, _x.end_s, _x.speed_limit,) = _struct_3d.unpack(str[start:end])
        self.target_lane.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.stop.enforced_line.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.stop.enforced_line.distance_s))
      _x = self.stop.preferred_start.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.stop.preferred_start.distance_s))
      _x = self.stop.preferred_end.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.stop.preferred_end.distance_s))
      _x = self.stop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.estop.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.change_lane.type))
      _x = self.not_ready.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.target_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.target_lane:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3d.pack(_x.start_s, _x.end_s, _x.speed_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cruise is None:
        self.cruise = decision_pb_msgs.msg.MainCruise()
      if self.stop is None:
        self.stop = decision_pb_msgs.msg.MainStop()
      if self.estop is None:
        self.estop = decision_pb_msgs.msg.MainEmergencyStop()
      if self.change_lane is None:
        self.change_lane = decision_pb_msgs.msg.MainChangeLane()
      if self.mission_complete is None:
        self.mission_complete = decision_pb_msgs.msg.MainMissionComplete()
      if self.not_ready is None:
        self.not_ready = decision_pb_msgs.msg.MainNotReady()
      if self.target_lane is None:
        self.target_lane = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stop.enforced_line.lane_id = str[start:end].decode('utf-8')
      else:
        self.stop.enforced_line.lane_id = str[start:end]
      start = end
      end += 8
      (self.stop.enforced_line.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stop.preferred_start.lane_id = str[start:end].decode('utf-8')
      else:
        self.stop.preferred_start.lane_id = str[start:end]
      start = end
      end += 8
      (self.stop.preferred_start.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stop.preferred_end.lane_id = str[start:end].decode('utf-8')
      else:
        self.stop.preferred_end.lane_id = str[start:end]
      start = end
      end += 8
      (self.stop.preferred_end.distance_s,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stop.reason = str[start:end].decode('utf-8')
      else:
        self.stop.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estop.reason = str[start:end].decode('utf-8')
      else:
        self.estop.reason = str[start:end]
      start = end
      end += 4
      (self.change_lane.type,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.not_ready.reason = str[start:end].decode('utf-8')
      else:
        self.not_ready.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target_lane = []
      for i in range(0, length):
        val1 = decision_pb_msgs.msg.TargetLane()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.start_s, _x.end_s, _x.speed_limit,) = _struct_3d.unpack(str[start:end])
        self.target_lane.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_d = struct.Struct("<d")
_struct_3d = struct.Struct("<3d")
