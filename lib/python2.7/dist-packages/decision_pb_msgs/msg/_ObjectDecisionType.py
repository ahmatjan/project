# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from decision_pb_msgs/ObjectDecisionType.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import decision_pb_msgs.msg

class ObjectDecisionType(genpy.Message):
  _md5sum = "7880879315d35535b631c60df2769d46"
  _type = "decision_pb_msgs/ObjectDecisionType"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ObjectIgnore ignore 
ObjectStop stop 
ObjectFollow follow 
ObjectYield yieldX 
ObjectOvertake overtake 
ObjectNudge nudge 
ObjectSidePass sidepass 

================================================================================
MSG: decision_pb_msgs/ObjectIgnore

================================================================================
MSG: decision_pb_msgs/ObjectStop
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/Range
float64 start 
float64 end 

================================================================================
MSG: decision_pb_msgs/ObjectFollow
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectYield
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectOvertake
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectNudge
float64 distance_l 
int32 type 
Range preferred_distance_l 

================================================================================
MSG: decision_pb_msgs/ObjectSidePass
float64 distance_s 
Range preferred_distance_s 
int32 type 
"""
  __slots__ = ['ignore','stop','follow','yieldX','overtake','nudge','sidepass']
  _slot_types = ['decision_pb_msgs/ObjectIgnore','decision_pb_msgs/ObjectStop','decision_pb_msgs/ObjectFollow','decision_pb_msgs/ObjectYield','decision_pb_msgs/ObjectOvertake','decision_pb_msgs/ObjectNudge','decision_pb_msgs/ObjectSidePass']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ignore,stop,follow,yieldX,overtake,nudge,sidepass

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectDecisionType, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ignore is None:
        self.ignore = decision_pb_msgs.msg.ObjectIgnore()
      if self.stop is None:
        self.stop = decision_pb_msgs.msg.ObjectStop()
      if self.follow is None:
        self.follow = decision_pb_msgs.msg.ObjectFollow()
      if self.yieldX is None:
        self.yieldX = decision_pb_msgs.msg.ObjectYield()
      if self.overtake is None:
        self.overtake = decision_pb_msgs.msg.ObjectOvertake()
      if self.nudge is None:
        self.nudge = decision_pb_msgs.msg.ObjectNudge()
      if self.sidepass is None:
        self.sidepass = decision_pb_msgs.msg.ObjectSidePass()
    else:
      self.ignore = decision_pb_msgs.msg.ObjectIgnore()
      self.stop = decision_pb_msgs.msg.ObjectStop()
      self.follow = decision_pb_msgs.msg.ObjectFollow()
      self.yieldX = decision_pb_msgs.msg.ObjectYield()
      self.overtake = decision_pb_msgs.msg.ObjectOvertake()
      self.nudge = decision_pb_msgs.msg.ObjectNudge()
      self.sidepass = decision_pb_msgs.msg.ObjectSidePass()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_13di5di.pack(_x.stop.distance_s, _x.stop.preferred_distance_s.start, _x.stop.preferred_distance_s.end, _x.follow.distance_s, _x.follow.preferred_distance_s.start, _x.follow.preferred_distance_s.end, _x.yieldX.distance_s, _x.yieldX.preferred_distance_s.start, _x.yieldX.preferred_distance_s.end, _x.overtake.distance_s, _x.overtake.preferred_distance_s.start, _x.overtake.preferred_distance_s.end, _x.nudge.distance_l, _x.nudge.type, _x.nudge.preferred_distance_l.start, _x.nudge.preferred_distance_l.end, _x.sidepass.distance_s, _x.sidepass.preferred_distance_s.start, _x.sidepass.preferred_distance_s.end, _x.sidepass.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ignore is None:
        self.ignore = decision_pb_msgs.msg.ObjectIgnore()
      if self.stop is None:
        self.stop = decision_pb_msgs.msg.ObjectStop()
      if self.follow is None:
        self.follow = decision_pb_msgs.msg.ObjectFollow()
      if self.yieldX is None:
        self.yieldX = decision_pb_msgs.msg.ObjectYield()
      if self.overtake is None:
        self.overtake = decision_pb_msgs.msg.ObjectOvertake()
      if self.nudge is None:
        self.nudge = decision_pb_msgs.msg.ObjectNudge()
      if self.sidepass is None:
        self.sidepass = decision_pb_msgs.msg.ObjectSidePass()
      end = 0
      _x = self
      start = end
      end += 152
      (_x.stop.distance_s, _x.stop.preferred_distance_s.start, _x.stop.preferred_distance_s.end, _x.follow.distance_s, _x.follow.preferred_distance_s.start, _x.follow.preferred_distance_s.end, _x.yieldX.distance_s, _x.yieldX.preferred_distance_s.start, _x.yieldX.preferred_distance_s.end, _x.overtake.distance_s, _x.overtake.preferred_distance_s.start, _x.overtake.preferred_distance_s.end, _x.nudge.distance_l, _x.nudge.type, _x.nudge.preferred_distance_l.start, _x.nudge.preferred_distance_l.end, _x.sidepass.distance_s, _x.sidepass.preferred_distance_s.start, _x.sidepass.preferred_distance_s.end, _x.sidepass.type,) = _struct_13di5di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_13di5di.pack(_x.stop.distance_s, _x.stop.preferred_distance_s.start, _x.stop.preferred_distance_s.end, _x.follow.distance_s, _x.follow.preferred_distance_s.start, _x.follow.preferred_distance_s.end, _x.yieldX.distance_s, _x.yieldX.preferred_distance_s.start, _x.yieldX.preferred_distance_s.end, _x.overtake.distance_s, _x.overtake.preferred_distance_s.start, _x.overtake.preferred_distance_s.end, _x.nudge.distance_l, _x.nudge.type, _x.nudge.preferred_distance_l.start, _x.nudge.preferred_distance_l.end, _x.sidepass.distance_s, _x.sidepass.preferred_distance_s.start, _x.sidepass.preferred_distance_s.end, _x.sidepass.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ignore is None:
        self.ignore = decision_pb_msgs.msg.ObjectIgnore()
      if self.stop is None:
        self.stop = decision_pb_msgs.msg.ObjectStop()
      if self.follow is None:
        self.follow = decision_pb_msgs.msg.ObjectFollow()
      if self.yieldX is None:
        self.yieldX = decision_pb_msgs.msg.ObjectYield()
      if self.overtake is None:
        self.overtake = decision_pb_msgs.msg.ObjectOvertake()
      if self.nudge is None:
        self.nudge = decision_pb_msgs.msg.ObjectNudge()
      if self.sidepass is None:
        self.sidepass = decision_pb_msgs.msg.ObjectSidePass()
      end = 0
      _x = self
      start = end
      end += 152
      (_x.stop.distance_s, _x.stop.preferred_distance_s.start, _x.stop.preferred_distance_s.end, _x.follow.distance_s, _x.follow.preferred_distance_s.start, _x.follow.preferred_distance_s.end, _x.yieldX.distance_s, _x.yieldX.preferred_distance_s.start, _x.yieldX.preferred_distance_s.end, _x.overtake.distance_s, _x.overtake.preferred_distance_s.start, _x.overtake.preferred_distance_s.end, _x.nudge.distance_l, _x.nudge.type, _x.nudge.preferred_distance_l.start, _x.nudge.preferred_distance_l.end, _x.sidepass.distance_s, _x.sidepass.preferred_distance_s.start, _x.sidepass.preferred_distance_s.end, _x.sidepass.type,) = _struct_13di5di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_13di5di = struct.Struct("<13di5di")
