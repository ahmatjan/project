# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from decision_pb_msgs/ObjectDecision.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import perception_pb_msgs.msg
import decision_pb_msgs.msg
import prediction_pb_msgs.msg

class ObjectDecision(genpy.Message):
  _md5sum = "23407fe7e29b08e4de379e8cffc045f3"
  _type = "decision_pb_msgs/ObjectDecision"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """prediction_pb_msgs/PredictionObstacle prediction 
string id 
int32 type 
ObjectDecisionType decision 

================================================================================
MSG: prediction_pb_msgs/PredictionObstacle
perception_pb_msgs/PerceptionObstacle perception_obstacle 
float64 time_stamp 
float64 predicted_period 
Trajectory[] trajectory 

================================================================================
MSG: perception_pb_msgs/PerceptionObstacle
int32 id 
Point position 
float64 theta 
Point velocity 
float64 length 
float64 width 
float64 height 
Point[] polygon_point 
float64 tracking_time 
int32 type 
float64 timestamp 

================================================================================
MSG: perception_pb_msgs/Point
float64 x 
float64 y 
float64 z 

================================================================================
MSG: prediction_pb_msgs/Trajectory
float64 probability 
TrajectoryPoint[] trajectory_point 

================================================================================
MSG: prediction_pb_msgs/TrajectoryPoint
float64 x 
float64 y 
float64 z 
float64 velocity 
float64 t 
float64 heading 

================================================================================
MSG: decision_pb_msgs/ObjectDecisionType
ObjectIgnore ignore 
ObjectStop stop 
ObjectFollow follow 
ObjectYield yieldX 
ObjectOvertake overtake 
ObjectNudge nudge 
ObjectSidePass sidepass 

================================================================================
MSG: decision_pb_msgs/ObjectIgnore

================================================================================
MSG: decision_pb_msgs/ObjectStop
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/Range
float64 start 
float64 end 

================================================================================
MSG: decision_pb_msgs/ObjectFollow
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectYield
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectOvertake
float64 distance_s 
Range preferred_distance_s 

================================================================================
MSG: decision_pb_msgs/ObjectNudge
float64 distance_l 
int32 type 
Range preferred_distance_l 

================================================================================
MSG: decision_pb_msgs/ObjectSidePass
float64 distance_s 
Range preferred_distance_s 
int32 type 
"""
  __slots__ = ['prediction','id','type','decision']
  _slot_types = ['prediction_pb_msgs/PredictionObstacle','string','int32','decision_pb_msgs/ObjectDecisionType']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prediction,id,type,decision

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectDecision, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prediction is None:
        self.prediction = prediction_pb_msgs.msg.PredictionObstacle()
      if self.id is None:
        self.id = ''
      if self.type is None:
        self.type = 0
      if self.decision is None:
        self.decision = decision_pb_msgs.msg.ObjectDecisionType()
    else:
      self.prediction = prediction_pb_msgs.msg.PredictionObstacle()
      self.id = ''
      self.type = 0
      self.decision = decision_pb_msgs.msg.ObjectDecisionType()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i10d.pack(_x.prediction.perception_obstacle.id, _x.prediction.perception_obstacle.position.x, _x.prediction.perception_obstacle.position.y, _x.prediction.perception_obstacle.position.z, _x.prediction.perception_obstacle.theta, _x.prediction.perception_obstacle.velocity.x, _x.prediction.perception_obstacle.velocity.y, _x.prediction.perception_obstacle.velocity.z, _x.prediction.perception_obstacle.length, _x.prediction.perception_obstacle.width, _x.prediction.perception_obstacle.height))
      length = len(self.prediction.perception_obstacle.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.prediction.perception_obstacle.polygon_point:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_di3d.pack(_x.prediction.perception_obstacle.tracking_time, _x.prediction.perception_obstacle.type, _x.prediction.perception_obstacle.timestamp, _x.prediction.time_stamp, _x.prediction.predicted_period))
      length = len(self.prediction.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.prediction.trajectory:
        buff.write(_struct_d.pack(val1.probability))
        length = len(val1.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_point:
          _x = val2
          buff.write(_struct_6d.pack(_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i13di5di.pack(_x.type, _x.decision.stop.distance_s, _x.decision.stop.preferred_distance_s.start, _x.decision.stop.preferred_distance_s.end, _x.decision.follow.distance_s, _x.decision.follow.preferred_distance_s.start, _x.decision.follow.preferred_distance_s.end, _x.decision.yieldX.distance_s, _x.decision.yieldX.preferred_distance_s.start, _x.decision.yieldX.preferred_distance_s.end, _x.decision.overtake.distance_s, _x.decision.overtake.preferred_distance_s.start, _x.decision.overtake.preferred_distance_s.end, _x.decision.nudge.distance_l, _x.decision.nudge.type, _x.decision.nudge.preferred_distance_l.start, _x.decision.nudge.preferred_distance_l.end, _x.decision.sidepass.distance_s, _x.decision.sidepass.preferred_distance_s.start, _x.decision.sidepass.preferred_distance_s.end, _x.decision.sidepass.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.prediction is None:
        self.prediction = prediction_pb_msgs.msg.PredictionObstacle()
      if self.decision is None:
        self.decision = decision_pb_msgs.msg.ObjectDecisionType()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.prediction.perception_obstacle.id, _x.prediction.perception_obstacle.position.x, _x.prediction.perception_obstacle.position.y, _x.prediction.perception_obstacle.position.z, _x.prediction.perception_obstacle.theta, _x.prediction.perception_obstacle.velocity.x, _x.prediction.perception_obstacle.velocity.y, _x.prediction.perception_obstacle.velocity.z, _x.prediction.perception_obstacle.length, _x.prediction.perception_obstacle.width, _x.prediction.perception_obstacle.height,) = _struct_i10d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prediction.perception_obstacle.polygon_point = []
      for i in range(0, length):
        val1 = perception_pb_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.prediction.perception_obstacle.polygon_point.append(val1)
      _x = self
      start = end
      end += 36
      (_x.prediction.perception_obstacle.tracking_time, _x.prediction.perception_obstacle.type, _x.prediction.perception_obstacle.timestamp, _x.prediction.time_stamp, _x.prediction.predicted_period,) = _struct_di3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prediction.trajectory = []
      for i in range(0, length):
        val1 = prediction_pb_msgs.msg.Trajectory()
        start = end
        end += 8
        (val1.probability,) = _struct_d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_point = []
        for i in range(0, length):
          val2 = prediction_pb_msgs.msg.TrajectoryPoint()
          _x = val2
          start = end
          end += 48
          (_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading,) = _struct_6d.unpack(str[start:end])
          val1.trajectory_point.append(val2)
        self.prediction.trajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 156
      (_x.type, _x.decision.stop.distance_s, _x.decision.stop.preferred_distance_s.start, _x.decision.stop.preferred_distance_s.end, _x.decision.follow.distance_s, _x.decision.follow.preferred_distance_s.start, _x.decision.follow.preferred_distance_s.end, _x.decision.yieldX.distance_s, _x.decision.yieldX.preferred_distance_s.start, _x.decision.yieldX.preferred_distance_s.end, _x.decision.overtake.distance_s, _x.decision.overtake.preferred_distance_s.start, _x.decision.overtake.preferred_distance_s.end, _x.decision.nudge.distance_l, _x.decision.nudge.type, _x.decision.nudge.preferred_distance_l.start, _x.decision.nudge.preferred_distance_l.end, _x.decision.sidepass.distance_s, _x.decision.sidepass.preferred_distance_s.start, _x.decision.sidepass.preferred_distance_s.end, _x.decision.sidepass.type,) = _struct_i13di5di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i10d.pack(_x.prediction.perception_obstacle.id, _x.prediction.perception_obstacle.position.x, _x.prediction.perception_obstacle.position.y, _x.prediction.perception_obstacle.position.z, _x.prediction.perception_obstacle.theta, _x.prediction.perception_obstacle.velocity.x, _x.prediction.perception_obstacle.velocity.y, _x.prediction.perception_obstacle.velocity.z, _x.prediction.perception_obstacle.length, _x.prediction.perception_obstacle.width, _x.prediction.perception_obstacle.height))
      length = len(self.prediction.perception_obstacle.polygon_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.prediction.perception_obstacle.polygon_point:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_di3d.pack(_x.prediction.perception_obstacle.tracking_time, _x.prediction.perception_obstacle.type, _x.prediction.perception_obstacle.timestamp, _x.prediction.time_stamp, _x.prediction.predicted_period))
      length = len(self.prediction.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.prediction.trajectory:
        buff.write(_struct_d.pack(val1.probability))
        length = len(val1.trajectory_point)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trajectory_point:
          _x = val2
          buff.write(_struct_6d.pack(_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i13di5di.pack(_x.type, _x.decision.stop.distance_s, _x.decision.stop.preferred_distance_s.start, _x.decision.stop.preferred_distance_s.end, _x.decision.follow.distance_s, _x.decision.follow.preferred_distance_s.start, _x.decision.follow.preferred_distance_s.end, _x.decision.yieldX.distance_s, _x.decision.yieldX.preferred_distance_s.start, _x.decision.yieldX.preferred_distance_s.end, _x.decision.overtake.distance_s, _x.decision.overtake.preferred_distance_s.start, _x.decision.overtake.preferred_distance_s.end, _x.decision.nudge.distance_l, _x.decision.nudge.type, _x.decision.nudge.preferred_distance_l.start, _x.decision.nudge.preferred_distance_l.end, _x.decision.sidepass.distance_s, _x.decision.sidepass.preferred_distance_s.start, _x.decision.sidepass.preferred_distance_s.end, _x.decision.sidepass.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.prediction is None:
        self.prediction = prediction_pb_msgs.msg.PredictionObstacle()
      if self.decision is None:
        self.decision = decision_pb_msgs.msg.ObjectDecisionType()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.prediction.perception_obstacle.id, _x.prediction.perception_obstacle.position.x, _x.prediction.perception_obstacle.position.y, _x.prediction.perception_obstacle.position.z, _x.prediction.perception_obstacle.theta, _x.prediction.perception_obstacle.velocity.x, _x.prediction.perception_obstacle.velocity.y, _x.prediction.perception_obstacle.velocity.z, _x.prediction.perception_obstacle.length, _x.prediction.perception_obstacle.width, _x.prediction.perception_obstacle.height,) = _struct_i10d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prediction.perception_obstacle.polygon_point = []
      for i in range(0, length):
        val1 = perception_pb_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.prediction.perception_obstacle.polygon_point.append(val1)
      _x = self
      start = end
      end += 36
      (_x.prediction.perception_obstacle.tracking_time, _x.prediction.perception_obstacle.type, _x.prediction.perception_obstacle.timestamp, _x.prediction.time_stamp, _x.prediction.predicted_period,) = _struct_di3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.prediction.trajectory = []
      for i in range(0, length):
        val1 = prediction_pb_msgs.msg.Trajectory()
        start = end
        end += 8
        (val1.probability,) = _struct_d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trajectory_point = []
        for i in range(0, length):
          val2 = prediction_pb_msgs.msg.TrajectoryPoint()
          _x = val2
          start = end
          end += 48
          (_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading,) = _struct_6d.unpack(str[start:end])
          val1.trajectory_point.append(val2)
        self.prediction.trajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      _x = self
      start = end
      end += 156
      (_x.type, _x.decision.stop.distance_s, _x.decision.stop.preferred_distance_s.start, _x.decision.stop.preferred_distance_s.end, _x.decision.follow.distance_s, _x.decision.follow.preferred_distance_s.start, _x.decision.follow.preferred_distance_s.end, _x.decision.yieldX.distance_s, _x.decision.yieldX.preferred_distance_s.start, _x.decision.yieldX.preferred_distance_s.end, _x.decision.overtake.distance_s, _x.decision.overtake.preferred_distance_s.start, _x.decision.overtake.preferred_distance_s.end, _x.decision.nudge.distance_l, _x.decision.nudge.type, _x.decision.nudge.preferred_distance_l.start, _x.decision.nudge.preferred_distance_l.end, _x.decision.sidepass.distance_s, _x.decision.sidepass.preferred_distance_s.start, _x.decision.sidepass.preferred_distance_s.end, _x.decision.sidepass.type,) = _struct_i13di5di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
_struct_d = struct.Struct("<d")
_struct_i10d = struct.Struct("<i10d")
_struct_i13di5di = struct.Struct("<i13di5di")
_struct_di3d = struct.Struct("<di3d")
_struct_3d = struct.Struct("<3d")
