# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from routing_pb_msgs/RoutingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import header_pb_msgs.msg
import routing_pb_msgs.msg

class RoutingRequest(genpy.Message):
  _md5sum = "4ec406a0c13a392eb58f483f1ae2b00e"
  _type = "routing_pb_msgs/RoutingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """header_pb_msgs/Header header 
LaneWaypoint start 
LaneWaypoint end 
Lane[] blacklisted_lane 

================================================================================
MSG: header_pb_msgs/Header
float64 timestamp_sec 
string module_name 
uint32 sequence_num 

================================================================================
MSG: routing_pb_msgs/LaneWaypoint
string id 
float64 s 
Pose pose 

================================================================================
MSG: routing_pb_msgs/Pose
float64 x 
float64 y 

================================================================================
MSG: routing_pb_msgs/Lane
string id 
float64 start_s 
float64 end_s 
float64 expired_timestamp 
"""
  __slots__ = ['header','start','end','blacklisted_lane']
  _slot_types = ['header_pb_msgs/Header','routing_pb_msgs/LaneWaypoint','routing_pb_msgs/LaneWaypoint','routing_pb_msgs/Lane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,start,end,blacklisted_lane

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoutingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.start is None:
        self.start = routing_pb_msgs.msg.LaneWaypoint()
      if self.end is None:
        self.end = routing_pb_msgs.msg.LaneWaypoint()
      if self.blacklisted_lane is None:
        self.blacklisted_lane = []
    else:
      self.header = header_pb_msgs.msg.Header()
      self.start = routing_pb_msgs.msg.LaneWaypoint()
      self.end = routing_pb_msgs.msg.LaneWaypoint()
      self.blacklisted_lane = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.header.sequence_num))
      _x = self.start.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.start.s, _x.start.pose.x, _x.start.pose.y))
      _x = self.end.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.end.s, _x.end.pose.x, _x.end.pose.y))
      length = len(self.blacklisted_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.blacklisted_lane:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3d.pack(_x.start_s, _x.end_s, _x.expired_timestamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.start is None:
        self.start = routing_pb_msgs.msg.LaneWaypoint()
      if self.end is None:
        self.end = routing_pb_msgs.msg.LaneWaypoint()
      if self.blacklisted_lane is None:
        self.blacklisted_lane = None
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (self.header.sequence_num,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start.id = str[start:end].decode('utf-8')
      else:
        self.start.id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.start.s, _x.start.pose.x, _x.start.pose.y,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end.id = str[start:end].decode('utf-8')
      else:
        self.end.id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.end.s, _x.end.pose.x, _x.end.pose.y,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blacklisted_lane = []
      for i in range(0, length):
        val1 = routing_pb_msgs.msg.Lane()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.start_s, _x.end_s, _x.expired_timestamp,) = _struct_3d.unpack(str[start:end])
        self.blacklisted_lane.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.header.sequence_num))
      _x = self.start.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.start.s, _x.start.pose.x, _x.start.pose.y))
      _x = self.end.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.end.s, _x.end.pose.x, _x.end.pose.y))
      length = len(self.blacklisted_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.blacklisted_lane:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_3d.pack(_x.start_s, _x.end_s, _x.expired_timestamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.start is None:
        self.start = routing_pb_msgs.msg.LaneWaypoint()
      if self.end is None:
        self.end = routing_pb_msgs.msg.LaneWaypoint()
      if self.blacklisted_lane is None:
        self.blacklisted_lane = None
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      start = end
      end += 4
      (self.header.sequence_num,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start.id = str[start:end].decode('utf-8')
      else:
        self.start.id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.start.s, _x.start.pose.x, _x.start.pose.y,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.end.id = str[start:end].decode('utf-8')
      else:
        self.end.id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.end.s, _x.end.pose.x, _x.end.pose.y,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blacklisted_lane = []
      for i in range(0, length):
        val1 = routing_pb_msgs.msg.Lane()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.start_s, _x.end_s, _x.expired_timestamp,) = _struct_3d.unpack(str[start:end])
        self.blacklisted_lane.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_3d = struct.Struct("<3d")
