# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_pb_msgs/ADCTrajectoryPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ADCTrajectoryPoint(genpy.Message):
  _md5sum = "53b3ea5cb43ca5a8512cfcf893273bc0"
  _type = "planning_pb_msgs/ADCTrajectoryPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x 
float64 y 
float64 z 
float64 s 
float64 l 
float64 speed 
float64 acceleration_s 
float64 curvature 
float64 curvature_change_rate 
float64 relative_time 
float64 theta 
"""
  __slots__ = ['x','y','z','s','l','speed','acceleration_s','curvature','curvature_change_rate','relative_time','theta']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,s,l,speed,acceleration_s,curvature,curvature_change_rate,relative_time,theta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADCTrajectoryPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.s is None:
        self.s = 0.
      if self.l is None:
        self.l = 0.
      if self.speed is None:
        self.speed = 0.
      if self.acceleration_s is None:
        self.acceleration_s = 0.
      if self.curvature is None:
        self.curvature = 0.
      if self.curvature_change_rate is None:
        self.curvature_change_rate = 0.
      if self.relative_time is None:
        self.relative_time = 0.
      if self.theta is None:
        self.theta = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.s = 0.
      self.l = 0.
      self.speed = 0.
      self.acceleration_s = 0.
      self.curvature = 0.
      self.curvature_change_rate = 0.
      self.relative_time = 0.
      self.theta = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_11d.pack(_x.x, _x.y, _x.z, _x.s, _x.l, _x.speed, _x.acceleration_s, _x.curvature, _x.curvature_change_rate, _x.relative_time, _x.theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.x, _x.y, _x.z, _x.s, _x.l, _x.speed, _x.acceleration_s, _x.curvature, _x.curvature_change_rate, _x.relative_time, _x.theta,) = _struct_11d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_11d.pack(_x.x, _x.y, _x.z, _x.s, _x.l, _x.speed, _x.acceleration_s, _x.curvature, _x.curvature_change_rate, _x.relative_time, _x.theta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.x, _x.y, _x.z, _x.s, _x.l, _x.speed, _x.acceleration_s, _x.curvature, _x.curvature_change_rate, _x.relative_time, _x.theta,) = _struct_11d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_11d = struct.Struct("<11d")
