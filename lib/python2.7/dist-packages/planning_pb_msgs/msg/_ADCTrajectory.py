# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planning_pb_msgs/ADCTrajectory.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import header_pb_msgs.msg
import planning_pb_msgs.msg

class ADCTrajectory(genpy.Message):
  _md5sum = "6ef5874ef63757681a9300e97f2345d2"
  _type = "planning_pb_msgs/ADCTrajectory"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """header_pb_msgs/Header header 
float64 total_path_length 
float64 total_path_time 
ADCTrajectoryPoint[] adc_trajectory_point 
ADCSignals signals 
EStop estop 

================================================================================
MSG: header_pb_msgs/Header
float64 timestamp_sec 
string module_name 
uint32 sequence_num 

================================================================================
MSG: planning_pb_msgs/ADCTrajectoryPoint
float64 x 
float64 y 
float64 z 
float64 s 
float64 l 
float64 speed 
float64 acceleration_s 
float64 curvature 
float64 curvature_change_rate 
float64 relative_time 
float64 theta 

================================================================================
MSG: planning_pb_msgs/ADCSignals
int32[] signal 

================================================================================
MSG: planning_pb_msgs/EStop
bool is_estop 
"""
  __slots__ = ['header','total_path_length','total_path_time','adc_trajectory_point','signals','estop']
  _slot_types = ['header_pb_msgs/Header','float64','float64','planning_pb_msgs/ADCTrajectoryPoint[]','planning_pb_msgs/ADCSignals','planning_pb_msgs/EStop']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,total_path_length,total_path_time,adc_trajectory_point,signals,estop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ADCTrajectory, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.total_path_length is None:
        self.total_path_length = 0.
      if self.total_path_time is None:
        self.total_path_time = 0.
      if self.adc_trajectory_point is None:
        self.adc_trajectory_point = []
      if self.signals is None:
        self.signals = planning_pb_msgs.msg.ADCSignals()
      if self.estop is None:
        self.estop = planning_pb_msgs.msg.EStop()
    else:
      self.header = header_pb_msgs.msg.Header()
      self.total_path_length = 0.
      self.total_path_time = 0.
      self.adc_trajectory_point = []
      self.signals = planning_pb_msgs.msg.ADCSignals()
      self.estop = planning_pb_msgs.msg.EStop()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I2d.pack(_x.header.sequence_num, _x.total_path_length, _x.total_path_time))
      length = len(self.adc_trajectory_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.adc_trajectory_point:
        _x = val1
        buff.write(_struct_11d.pack(_x.x, _x.y, _x.z, _x.s, _x.l, _x.speed, _x.acceleration_s, _x.curvature, _x.curvature_change_rate, _x.relative_time, _x.theta))
      length = len(self.signals.signal)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.signals.signal))
      buff.write(_struct_B.pack(self.estop.is_estop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.adc_trajectory_point is None:
        self.adc_trajectory_point = None
      if self.signals is None:
        self.signals = planning_pb_msgs.msg.ADCSignals()
      if self.estop is None:
        self.estop = planning_pb_msgs.msg.EStop()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.header.sequence_num, _x.total_path_length, _x.total_path_time,) = _struct_I2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adc_trajectory_point = []
      for i in range(0, length):
        val1 = planning_pb_msgs.msg.ADCTrajectoryPoint()
        _x = val1
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.s, _x.l, _x.speed, _x.acceleration_s, _x.curvature, _x.curvature_change_rate, _x.relative_time, _x.theta,) = _struct_11d.unpack(str[start:end])
        self.adc_trajectory_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.signals.signal = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.estop.is_estop,) = _struct_B.unpack(str[start:end])
      self.estop.is_estop = bool(self.estop.is_estop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I2d.pack(_x.header.sequence_num, _x.total_path_length, _x.total_path_time))
      length = len(self.adc_trajectory_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.adc_trajectory_point:
        _x = val1
        buff.write(_struct_11d.pack(_x.x, _x.y, _x.z, _x.s, _x.l, _x.speed, _x.acceleration_s, _x.curvature, _x.curvature_change_rate, _x.relative_time, _x.theta))
      length = len(self.signals.signal)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.signals.signal.tostring())
      buff.write(_struct_B.pack(self.estop.is_estop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.adc_trajectory_point is None:
        self.adc_trajectory_point = None
      if self.signals is None:
        self.signals = planning_pb_msgs.msg.ADCSignals()
      if self.estop is None:
        self.estop = planning_pb_msgs.msg.EStop()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.header.sequence_num, _x.total_path_length, _x.total_path_time,) = _struct_I2d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adc_trajectory_point = []
      for i in range(0, length):
        val1 = planning_pb_msgs.msg.ADCTrajectoryPoint()
        _x = val1
        start = end
        end += 88
        (_x.x, _x.y, _x.z, _x.s, _x.l, _x.speed, _x.acceleration_s, _x.curvature, _x.curvature_change_rate, _x.relative_time, _x.theta,) = _struct_11d.unpack(str[start:end])
        self.adc_trajectory_point.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.signals.signal = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 1
      (self.estop.is_estop,) = _struct_B.unpack(str[start:end])
      self.estop.is_estop = bool(self.estop.is_estop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_11d = struct.Struct("<11d")
_struct_B = struct.Struct("<B")
_struct_I2d = struct.Struct("<I2d")
_struct_d = struct.Struct("<d")
