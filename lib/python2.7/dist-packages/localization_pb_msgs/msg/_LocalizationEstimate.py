# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from localization_pb_msgs/LocalizationEstimate.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import header_pb_msgs.msg
import common_pb_msgs.msg
import localization_pb_msgs.msg

class LocalizationEstimate(genpy.Message):
  _md5sum = "331f9aef126565b5687e341f8a2fb5c0"
  _type = "localization_pb_msgs/LocalizationEstimate"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """header_pb_msgs/Header header 
Pose pose 
Uncertainty uncertainty 

================================================================================
MSG: header_pb_msgs/Header
float64 timestamp_sec 
string module_name 
uint32 sequence_num 

================================================================================
MSG: localization_pb_msgs/Pose
common_pb_msgs/PointENU position 
common_pb_msgs/Quaternion orientation 
common_pb_msgs/Point3D linear_velocity 
common_pb_msgs/Point3D linear_acceleration 
common_pb_msgs/Point3D angular_velocity 

================================================================================
MSG: common_pb_msgs/PointENU
float64 x 
float64 y 
float64 z 

================================================================================
MSG: common_pb_msgs/Quaternion
float64 qx 
float64 qy 
float64 qz 
float64 qw 

================================================================================
MSG: common_pb_msgs/Point3D
float64 x 
float64 y 
float64 z 

================================================================================
MSG: localization_pb_msgs/Uncertainty
common_pb_msgs/Point3D position_std_dev 
common_pb_msgs/Point3D orientation_std_dev 
common_pb_msgs/Point3D linear_velocity_std_dev 
common_pb_msgs/Point3D linear_acceleration_std_dev 
common_pb_msgs/Point3D angular_velocity_std_dev 
"""
  __slots__ = ['header','pose','uncertainty']
  _slot_types = ['header_pb_msgs/Header','localization_pb_msgs/Pose','localization_pb_msgs/Uncertainty']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pose,uncertainty

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalizationEstimate, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.pose is None:
        self.pose = localization_pb_msgs.msg.Pose()
      if self.uncertainty is None:
        self.uncertainty = localization_pb_msgs.msg.Uncertainty()
    else:
      self.header = header_pb_msgs.msg.Header()
      self.pose = localization_pb_msgs.msg.Pose()
      self.uncertainty = localization_pb_msgs.msg.Uncertainty()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I31d.pack(_x.header.sequence_num, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.qx, _x.pose.orientation.qy, _x.pose.orientation.qz, _x.pose.orientation.qw, _x.pose.linear_velocity.x, _x.pose.linear_velocity.y, _x.pose.linear_velocity.z, _x.pose.linear_acceleration.x, _x.pose.linear_acceleration.y, _x.pose.linear_acceleration.z, _x.pose.angular_velocity.x, _x.pose.angular_velocity.y, _x.pose.angular_velocity.z, _x.uncertainty.position_std_dev.x, _x.uncertainty.position_std_dev.y, _x.uncertainty.position_std_dev.z, _x.uncertainty.orientation_std_dev.x, _x.uncertainty.orientation_std_dev.y, _x.uncertainty.orientation_std_dev.z, _x.uncertainty.linear_velocity_std_dev.x, _x.uncertainty.linear_velocity_std_dev.y, _x.uncertainty.linear_velocity_std_dev.z, _x.uncertainty.linear_acceleration_std_dev.x, _x.uncertainty.linear_acceleration_std_dev.y, _x.uncertainty.linear_acceleration_std_dev.z, _x.uncertainty.angular_velocity_std_dev.x, _x.uncertainty.angular_velocity_std_dev.y, _x.uncertainty.angular_velocity_std_dev.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.pose is None:
        self.pose = localization_pb_msgs.msg.Pose()
      if self.uncertainty is None:
        self.uncertainty = localization_pb_msgs.msg.Uncertainty()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 252
      (_x.header.sequence_num, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.qx, _x.pose.orientation.qy, _x.pose.orientation.qz, _x.pose.orientation.qw, _x.pose.linear_velocity.x, _x.pose.linear_velocity.y, _x.pose.linear_velocity.z, _x.pose.linear_acceleration.x, _x.pose.linear_acceleration.y, _x.pose.linear_acceleration.z, _x.pose.angular_velocity.x, _x.pose.angular_velocity.y, _x.pose.angular_velocity.z, _x.uncertainty.position_std_dev.x, _x.uncertainty.position_std_dev.y, _x.uncertainty.position_std_dev.z, _x.uncertainty.orientation_std_dev.x, _x.uncertainty.orientation_std_dev.y, _x.uncertainty.orientation_std_dev.z, _x.uncertainty.linear_velocity_std_dev.x, _x.uncertainty.linear_velocity_std_dev.y, _x.uncertainty.linear_velocity_std_dev.z, _x.uncertainty.linear_acceleration_std_dev.x, _x.uncertainty.linear_acceleration_std_dev.y, _x.uncertainty.linear_acceleration_std_dev.z, _x.uncertainty.angular_velocity_std_dev.x, _x.uncertainty.angular_velocity_std_dev.y, _x.uncertainty.angular_velocity_std_dev.z,) = _struct_I31d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I31d.pack(_x.header.sequence_num, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.qx, _x.pose.orientation.qy, _x.pose.orientation.qz, _x.pose.orientation.qw, _x.pose.linear_velocity.x, _x.pose.linear_velocity.y, _x.pose.linear_velocity.z, _x.pose.linear_acceleration.x, _x.pose.linear_acceleration.y, _x.pose.linear_acceleration.z, _x.pose.angular_velocity.x, _x.pose.angular_velocity.y, _x.pose.angular_velocity.z, _x.uncertainty.position_std_dev.x, _x.uncertainty.position_std_dev.y, _x.uncertainty.position_std_dev.z, _x.uncertainty.orientation_std_dev.x, _x.uncertainty.orientation_std_dev.y, _x.uncertainty.orientation_std_dev.z, _x.uncertainty.linear_velocity_std_dev.x, _x.uncertainty.linear_velocity_std_dev.y, _x.uncertainty.linear_velocity_std_dev.z, _x.uncertainty.linear_acceleration_std_dev.x, _x.uncertainty.linear_acceleration_std_dev.y, _x.uncertainty.linear_acceleration_std_dev.z, _x.uncertainty.angular_velocity_std_dev.x, _x.uncertainty.angular_velocity_std_dev.y, _x.uncertainty.angular_velocity_std_dev.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = header_pb_msgs.msg.Header()
      if self.pose is None:
        self.pose = localization_pb_msgs.msg.Pose()
      if self.uncertainty is None:
        self.uncertainty = localization_pb_msgs.msg.Uncertainty()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 252
      (_x.header.sequence_num, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.qx, _x.pose.orientation.qy, _x.pose.orientation.qz, _x.pose.orientation.qw, _x.pose.linear_velocity.x, _x.pose.linear_velocity.y, _x.pose.linear_velocity.z, _x.pose.linear_acceleration.x, _x.pose.linear_acceleration.y, _x.pose.linear_acceleration.z, _x.pose.angular_velocity.x, _x.pose.angular_velocity.y, _x.pose.angular_velocity.z, _x.uncertainty.position_std_dev.x, _x.uncertainty.position_std_dev.y, _x.uncertainty.position_std_dev.z, _x.uncertainty.orientation_std_dev.x, _x.uncertainty.orientation_std_dev.y, _x.uncertainty.orientation_std_dev.z, _x.uncertainty.linear_velocity_std_dev.x, _x.uncertainty.linear_velocity_std_dev.y, _x.uncertainty.linear_velocity_std_dev.z, _x.uncertainty.linear_acceleration_std_dev.x, _x.uncertainty.linear_acceleration_std_dev.y, _x.uncertainty.linear_acceleration_std_dev.z, _x.uncertainty.angular_velocity_std_dev.x, _x.uncertainty.angular_velocity_std_dev.y, _x.uncertainty.angular_velocity_std_dev.z,) = _struct_I31d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I31d = struct.Struct("<I31d")
_struct_d = struct.Struct("<d")
