# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from status_pb_msgs/Chassis.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Chassis(genpy.Message):
  _md5sum = "f2d8ec377a6a1aeabfb0e7ae112bbef4"
  _type = "status_pb_msgs/Chassis"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 driving_mode 
int32 error_code 
bool engine_started 
float32 engine_rpm 
float32 speed_mps 
float32 odometer_m 
int32 fuel_range_m 
float32 throttle_percentage 
float32 brake_percentage 
int32 gear_location 
float32 steering_percentage 
float32 steering_torque_nm 
bool parking_brake 
bool high_beam_signal 
bool low_beam_signal 
bool left_turn_signal 
bool right_turn_signal 
bool horn 
bool wiper 
"""
  __slots__ = ['driving_mode','error_code','engine_started','engine_rpm','speed_mps','odometer_m','fuel_range_m','throttle_percentage','brake_percentage','gear_location','steering_percentage','steering_torque_nm','parking_brake','high_beam_signal','low_beam_signal','left_turn_signal','right_turn_signal','horn','wiper']
  _slot_types = ['int32','int32','bool','float32','float32','float32','int32','float32','float32','int32','float32','float32','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       driving_mode,error_code,engine_started,engine_rpm,speed_mps,odometer_m,fuel_range_m,throttle_percentage,brake_percentage,gear_location,steering_percentage,steering_torque_nm,parking_brake,high_beam_signal,low_beam_signal,left_turn_signal,right_turn_signal,horn,wiper

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Chassis, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.driving_mode is None:
        self.driving_mode = 0
      if self.error_code is None:
        self.error_code = 0
      if self.engine_started is None:
        self.engine_started = False
      if self.engine_rpm is None:
        self.engine_rpm = 0.
      if self.speed_mps is None:
        self.speed_mps = 0.
      if self.odometer_m is None:
        self.odometer_m = 0.
      if self.fuel_range_m is None:
        self.fuel_range_m = 0
      if self.throttle_percentage is None:
        self.throttle_percentage = 0.
      if self.brake_percentage is None:
        self.brake_percentage = 0.
      if self.gear_location is None:
        self.gear_location = 0
      if self.steering_percentage is None:
        self.steering_percentage = 0.
      if self.steering_torque_nm is None:
        self.steering_torque_nm = 0.
      if self.parking_brake is None:
        self.parking_brake = False
      if self.high_beam_signal is None:
        self.high_beam_signal = False
      if self.low_beam_signal is None:
        self.low_beam_signal = False
      if self.left_turn_signal is None:
        self.left_turn_signal = False
      if self.right_turn_signal is None:
        self.right_turn_signal = False
      if self.horn is None:
        self.horn = False
      if self.wiper is None:
        self.wiper = False
    else:
      self.driving_mode = 0
      self.error_code = 0
      self.engine_started = False
      self.engine_rpm = 0.
      self.speed_mps = 0.
      self.odometer_m = 0.
      self.fuel_range_m = 0
      self.throttle_percentage = 0.
      self.brake_percentage = 0.
      self.gear_location = 0
      self.steering_percentage = 0.
      self.steering_torque_nm = 0.
      self.parking_brake = False
      self.high_beam_signal = False
      self.low_beam_signal = False
      self.left_turn_signal = False
      self.right_turn_signal = False
      self.horn = False
      self.wiper = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2iB3fi2fi2f7B.pack(_x.driving_mode, _x.error_code, _x.engine_started, _x.engine_rpm, _x.speed_mps, _x.odometer_m, _x.fuel_range_m, _x.throttle_percentage, _x.brake_percentage, _x.gear_location, _x.steering_percentage, _x.steering_torque_nm, _x.parking_brake, _x.high_beam_signal, _x.low_beam_signal, _x.left_turn_signal, _x.right_turn_signal, _x.horn, _x.wiper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.driving_mode, _x.error_code, _x.engine_started, _x.engine_rpm, _x.speed_mps, _x.odometer_m, _x.fuel_range_m, _x.throttle_percentage, _x.brake_percentage, _x.gear_location, _x.steering_percentage, _x.steering_torque_nm, _x.parking_brake, _x.high_beam_signal, _x.low_beam_signal, _x.left_turn_signal, _x.right_turn_signal, _x.horn, _x.wiper,) = _struct_2iB3fi2fi2f7B.unpack(str[start:end])
      self.engine_started = bool(self.engine_started)
      self.parking_brake = bool(self.parking_brake)
      self.high_beam_signal = bool(self.high_beam_signal)
      self.low_beam_signal = bool(self.low_beam_signal)
      self.left_turn_signal = bool(self.left_turn_signal)
      self.right_turn_signal = bool(self.right_turn_signal)
      self.horn = bool(self.horn)
      self.wiper = bool(self.wiper)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2iB3fi2fi2f7B.pack(_x.driving_mode, _x.error_code, _x.engine_started, _x.engine_rpm, _x.speed_mps, _x.odometer_m, _x.fuel_range_m, _x.throttle_percentage, _x.brake_percentage, _x.gear_location, _x.steering_percentage, _x.steering_torque_nm, _x.parking_brake, _x.high_beam_signal, _x.low_beam_signal, _x.left_turn_signal, _x.right_turn_signal, _x.horn, _x.wiper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.driving_mode, _x.error_code, _x.engine_started, _x.engine_rpm, _x.speed_mps, _x.odometer_m, _x.fuel_range_m, _x.throttle_percentage, _x.brake_percentage, _x.gear_location, _x.steering_percentage, _x.steering_torque_nm, _x.parking_brake, _x.high_beam_signal, _x.low_beam_signal, _x.left_turn_signal, _x.right_turn_signal, _x.horn, _x.wiper,) = _struct_2iB3fi2fi2f7B.unpack(str[start:end])
      self.engine_started = bool(self.engine_started)
      self.parking_brake = bool(self.parking_brake)
      self.high_beam_signal = bool(self.high_beam_signal)
      self.low_beam_signal = bool(self.low_beam_signal)
      self.left_turn_signal = bool(self.left_turn_signal)
      self.right_turn_signal = bool(self.right_turn_signal)
      self.horn = bool(self.horn)
      self.wiper = bool(self.wiper)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2iB3fi2fi2f7B = struct.Struct("<2iB3fi2fi2f7B")
