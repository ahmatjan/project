# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from prediction_pb_msgs/Trajectory.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import prediction_pb_msgs.msg

class Trajectory(genpy.Message):
  _md5sum = "a44a558c9296d8f765d2e2a0e35fbf23"
  _type = "prediction_pb_msgs/Trajectory"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 probability 
TrajectoryPoint[] trajectory_point 

================================================================================
MSG: prediction_pb_msgs/TrajectoryPoint
float64 x 
float64 y 
float64 z 
float64 velocity 
float64 t 
float64 heading 
"""
  __slots__ = ['probability','trajectory_point']
  _slot_types = ['float64','prediction_pb_msgs/TrajectoryPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       probability,trajectory_point

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Trajectory, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.probability is None:
        self.probability = 0.
      if self.trajectory_point is None:
        self.trajectory_point = []
    else:
      self.probability = 0.
      self.trajectory_point = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.probability))
      length = len(self.trajectory_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_point:
        _x = val1
        buff.write(_struct_6d.pack(_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectory_point is None:
        self.trajectory_point = None
      end = 0
      start = end
      end += 8
      (self.probability,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_point = []
      for i in range(0, length):
        val1 = prediction_pb_msgs.msg.TrajectoryPoint()
        _x = val1
        start = end
        end += 48
        (_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading,) = _struct_6d.unpack(str[start:end])
        self.trajectory_point.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.probability))
      length = len(self.trajectory_point)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory_point:
        _x = val1
        buff.write(_struct_6d.pack(_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectory_point is None:
        self.trajectory_point = None
      end = 0
      start = end
      end += 8
      (self.probability,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory_point = []
      for i in range(0, length):
        val1 = prediction_pb_msgs.msg.TrajectoryPoint()
        _x = val1
        start = end
        end += 48
        (_x.x, _x.y, _x.z, _x.velocity, _x.t, _x.heading,) = _struct_6d.unpack(str[start:end])
        self.trajectory_point.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
_struct_d = struct.Struct("<d")
