#!/bin/bash
#
# Copyright (c) 2015 Baidu.com, Inc. All Rights Reserved
#
# Author: yangkai04@baidu.com
# Date: 2015/11/11
# Brief:
#   A manager of applications.
# Globals:
#   procfile : procfile path
#   env_file : env_file path
#   log_file : log_file path
#   data_day : run date
# Arguments:
#   -f  set procfile
#   -e  set env_file
#   -c  check procfile and env_file
#   -h  print help message
#   -t  set the run_time of program
# Returns:
#   succ:0
#   fail:1

#set -x # set -o xtrace
set -e # set -o errexit
set -u # set -o nounset
set -o pipefail 
shopt -s expand_aliases

readonly COLOR_BASE=32
readonly COLOR_RANGE=5
color_now=0

PORT=8080
DATE_FORMAT='+"%Y-%m-%d %H:%M:%S"'
FOO=""
procfile="./prod/Procfile"
env_file="./.env"
log_file="./log/${0}.log"
data_day=$(date +"%Y%m%d")
subid_list=""
global_quit=0
model="normal"

function usage() {
    echo -e "Usage: ${0} [-c] [-f procfile|Procfile] [-e envfile|.env]"
    echo -e "    -c  check procfile and envfile" 
    echo -e "    -f  set procfile"
    echo -e "    -e  set envfile"
    echo -e "    -h  print help message"
    echo -e "    -t  set the run_time of program"
    echo -e "        format is YYYYmmdd"
    echo -e "        if it's null, default is current time"
}

#######################################
# Brief:
#   get options from command line.
# Globals:
#   procfile
#   env_file
#   data_day
# Arguments:
#   none
# Returns:
#   none
#######################################
function get_option() {
    while getopts chf:e:t: flag; do
        case "${flag}" in
            c)
                model="check"
                ;;
            h) 
                usage
                exit 0
                ;;
            f) 
                procfile="${OPTARG}"
                ;;
            e) 
                env_file="${OPTARG}"
                ;;
            t) 
                data_day="${OPTARG}"
                ;;
            *) 
                usage
                exit 1
                ;;
        esac
    done
}

#######################################
# Brief:
#   verify conf and file path
# Globals:
#   procfile
#   env_file
#   log_file
# Arguments:
#   none
# Returns:
#   none
#######################################
function verify() {
    if [ -z "${procfile}" ]; then
        echo "FATAL procfile empty error."
        exit 1
    fi
    if [ ! -f "${procfile}" ]; then
        echo "FATAL ${procfile} not exist error."
        exit 1
    fi
    local fn_retvalue=0
    while read -r line; do
        if [ -z "${line}" -o ! -z "$(echo ${line} | sed -n '/^#.*$/p')" ]; then
            continue
        fi
        if [ -z "$(echo ${line} | sed -n '/^[^:]*:.*$/p')" ]; then
            echo "line[${line}] of ${procfile} error."
            fn_retvalue=1
            continue
        fi
        local fn_name=$(echo ${line} | sed -n 's/^\([^:]*\):\(.*\)$/\1/p')
        local fn_cmd=$(echo ${line} | sed -n 's/^\([^:]*\):\(.*\)$/\2/p')
        if [ -z "${fn_name}" -o -z "${fn_cmd}" ]; then
            echo "line[${line}] of ${procfile} error."
            fn_retvalue=1
            continue
        fi
        if [ -z "$(echo ${fn_name} | sed -n '/^[_a-zA-Z0-9]*$/p')" ]; then
            echo "line[${line}] of ${procfile} error."
            fn_retvalue=1
            continue
        fi
    done < ${procfile}
    if [ ${fn_retvalue} -ne 0 ]; then
        exit ${fn_retvalue}
    fi

    if [ -z "${env_file}" ]; then
        echo "FATAL env_file empty error."
        exit 1
    fi
    if [ ! -f "${env_file}" ]; then
        echo "FATAL ${env_file} not exist error."
        exit 1
    fi
    while read -r line; do
        if [ -z "${line}" -o ! -z "$(echo ${line} | sed -n '/^#.*$/p')" ]; then
            continue
        fi
        if [ -z "$(echo ${line} | sed -n '/^[^=]*=[^=]*$/p')" ]; then
            echo "line[${line}] of ${env_file} error."
            fn_retvalue=1
            continue
        fi
        local fn_name=$(echo ${line} | sed -n 's/^\([^=]*\)=\(.*\)$/\1/p')
        local fn_value=$(echo ${line} | sed -n 's/^\([^=]*\)=\(.*\)$/\2/p')
        if [ -z "${fn_name}" ]; then
            echo "line[${line}] of ${env_file} error."
            fn_retvalue=1
            continue
        fi
        if [ -z "$(echo ${fn_name} | sed -n '/^[_a-zA-Z0-9]*$/p')" ]; then
            echo "line[${line}] of ${env_file} error."
            fn_retvalue=1
            continue
        fi
        if [ ! -z "$(echo ${fn_value} | sed -n '/^[^ ]* [^ ]*$/p')" ]; then
            echo "line[${line}] of ${env_file} error."
            fn_retvalue=1
            continue
        fi
    done < ${env_file}
    if [ ${fn_retvalue} -ne 0 ]; then
        exit ${fn_retvalue}
    fi

    local fn_log_path="${log_file%/*}"
    if [ ! -d "${fn_log_path}" ]; then
        mkdir -p ${fn_log_path}
        if [ $? -ne 0 ]; then
            echo "FATAL mkdir log path[${fn_log_path}] error."
            exit 1
        fi
    fi
}

#######################################
# Brief:
#   source and check env_file
# Globals:
#   env_file
#   PORT
#   DATE_FORMAT
# Arguments:
#   none
# Returns:
#   none
#######################################
function load_env_file() {
    source ${env_file}
    if [ $? -ne 0 ]; then
        echo "FATAL source ${env_file} error."
    fi
    if [ -z "${PORT}" ]; then
        echo "FATAL PORT empty error."
        exit 1
    fi
    if [ -z "${DATE_FORMAT}" ]; then
        echo "FATAL DATE_FORMAT empty error."
        exit 1
    fi
}

#######################################
# Brief:
#   load and run procfile
# Globals:
#   procfile
# Arguments:
#   none
# Returns:
#   none
#######################################
function run_procfile() {
    local fn_proc_path="${procfile%/*}"
    local fn_proc_file="${procfile##*/}"
    cd ${fn_proc_path} >/dev/null
    while read -r line; do
        local fn_name=$(echo ${line} | sed -n 's/^\([^:]*\):\(.*\)$/\1/p')
        local fn_cmd=$(echo ${line} | sed -n 's/^\([^:]*\):\(.*\)$/\2/p')
        echo ${fn_cmd}
        eval "fn_cmd=\"${fn_cmd}\""
        run_command "${fn_name}" "${fn_cmd}"
        if [ $? -ne 0 ]; then
            global_quit=1
            cd - >/dev/null
            return 1
        fi
    done < ${fn_proc_file}
    cd - >/dev/null
#((PORT+=1))
    return 0
}

function run_command() {
    local fn_name="$1"
    local fn_cmd="$2"
    eval "${fn_cmd} 2>&1 | log_process ${fn_name} &"
    local fn_pid="$(jobs -p %%)"
    log_print "${fn_name}" "${fn_cmd} started with pid ${fn_pid}"
    if [ $? -ne 0 ]; then
        global_quit=1
        return 1
    fi
    subid_list="${fn_pid} ${subid_list}"
    return 0
}

function log_process() {
    local fn_date=$(date +"%H:%M:%S")
    local fn_color=$((${COLOR_BASE} + ${color_now}%${COLOR_RANGE}))
    local fn_name="$1"
    while read -r line; do 
        log_print "${fn_name}" "$line"
    done
}

function log_print() {
    local fn_date=$(date +"%H:%M:%S")
    local fn_color=$((${COLOR_BASE} + ${color_now}%${COLOR_RANGE}))
    local fn_name="$1"
    local fn_cmd="$2"
    echo -e "\e[1;${fn_color}m${fn_date} ${fn_name}\e[0m\t| ${fn_cmd}"
    ((++color_now))
}

function quit_all() {
    local fn_cmd="global_quit=1 && kill ${subid_list} >/dev/null 2>&1 && wait"
    trap "${fn_cmd}" INT SIGTERM
    while [ ${global_quit} -ne 1 ]; do
        sleep 1
    done
}

function main() {
    get_option "$@"
    verify
    if [ "${model}" == "check" ]; then
        exit 0
    fi
    load_env_file
    run_procfile
    quit_all
}

main "$@"
exit $?
