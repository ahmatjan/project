#!/bin/bash
#
# Copyright (c) 2015 Baidu.com, Inc. All Rights Reserved
#
# Author: sunshiyao
# Date: 2016/08/16
# Brief:
#   Run applications according to Procfine and environment file. 
# Globals:
#   PROCFILE
#   ENVFILE
#   CHECKFLAG
# Arguments:
#   -h help
#   -c checkflag
#   -f procfile
#   -e envfile
# Returns:
#   succ:0
#   fail:1

# 1. switch
#set -x # set -o xtrace
set -e 
#set -u # set -o nounset
set -o pipefail

#GLOBAL VARIABLE
WORK_PATH=$(dirname "$0")
PROCFILE="${WORK_PATH}/Procfile"
ENVFILE="${WORK_PATH}/.env"
PORT='8080'

WORK_TMP="${WORK_PATH}/.runit"
PROCFILE_PID="${WORK_TMP}/PROCFILE.PID"

checkflag=false
envfile=""
procfile=""

#######################################
# Brief:
#   Show usage info.
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
function usage() {

    echo "Usage: runit [-c] [-f procfile|Procfile] [-e envfile|.env]"
    exit 1;
}

#######################################
# Brief:
#   Verify the validity of procfile and environment file. Show the invalid line of files
# Globals:
#   ENVFILE
#   PROCFILE
# Arguments:
#   None
# Returns:
#   None
#######################################
function verify() {
    while read line ; do
        echo $line
        if echo "${line}" | grep -qv ":" ; then
            echo "no_colon_command" 
            continue
        fi
        key="${line%%:*}"
        value="${line#*:}"
        echo "${key}" | grep -qP "[^a-zA-Z0-9_]" \
            && echo "invalid_char:${key}" 
    done< <(grep -vP "^[\s]*#" "${procfile}" )

    [[ -z "${envfile}" ]] && return 0
    
    while read line ; do
        if echo "${line}" | grep -qv "="
        then
            echo "no_equal_mark:${line}"
            continue
        fi
        local key="${line%=*}"
        local value="${line#*=}"
        echo "${value}" | grep -qP "[\s]" \
            && echo "value_have_space:${line}"
        echo "${key}" | grep -qP "[^a-zA-Z0-9_]" \
            && echo "invalid_char:${line}"
    done< <( grep -vP "^[\s]*#" "${envfile}" | grep -v "^$" )
    return 0
}

#######################################
# Brief:
#   log pid and subpid
# Globals:
#   PROCFILE_PID
# Arguments:
#   log_pid "${PID}"
# Returns:
#   None
#######################################
function log_pid(){
    local proc_pid="$1"
    while true; do
        echo "${proc_pid}" >> "${PROCFILE_PID}"
        local pid=$( pgrep -P "${proc_pid}")
        [[ -z "${pid}" ]] && break || proc_pid="${pid}"
    done
}

#######################################
# Brief:
#   Print log
# Globals:
#   None
# Arguments:
#   proc_name
#   proc_cmd
# Returns:
#   None
#######################################
function log() {

    local proc_name="$1"
    local proc_cmd="$2"
    local proc_pid=$!
    local color="3$(( $RANDOM % 7 + 1))"
    local log_date=$(date +%H:%M:%S)

    log_pid "${proc_pid}"

    echo -ne "\e[${color}m ${log_date} ${proc_name}\t|\e[0m "
    echo -e "${proc_cmd} started with pid ${proc_pid}"
    while read line ; do
        [[ -z "${line}" ]] && continue
        echo -e "\e[${color}m ${log_date} ${proc_name}\t|\e[0m ${line}"
    done
}


#######################################
# Brief:
#   Run command and record pid
# Globals:
#   None
# Arguments:
#   proc_cmd
# Returns:
#   None
#######################################
function run_command() {

    local proc_info="$1"
    local proc_name="${proc_info%%:*}"
    local proc_cmd=$( eval echo "${proc_info#*:}")
    bash -c "${proc_cmd}" 2>&1 | log ${proc_name} "${proc_cmd}" &
}

#######################################
# Brief:
#   Load the environment file.
# Globals:
#   ENVFILE
# Arguments:
#   None
# Returns:
#   None
#######################################
function load_env_file() {
    [[ ! -f "${envfile}" ]] && return 0
    while read line ; do
        export "${line}"
    done< <( cat "${envfile}" | grep -vP "^[\s]*#" | grep -v "^$" )

}

#######################################
# Brief:
#   Run each command in PROCFILE
# Globals:
#   PROCFILE
# Arguments:
#   None
# Returns:
#   None
#######################################
function run_procfile() {
    
    while read line ; do
        run_command "${line}" 
        echo "${line}" | grep -q "\$PORT" && ((PORT +=1 ))
    done < <( cat "${procfile}" | grep -vP "^[\s]*#" | grep -v "^$" )
    wait
}

#######################################
# Brief:
#   Kill all proc.
# Globals:
#   PROCFILE_PID
# Arguments:
#   None
# Returns:
#   None
#######################################
function kill_proc() { 

    echo "shiny debug killing !!!"
    while read pid ; do
        kill -9 "${pid}" 2> /dev/null
    done < ${PROCFILE_PID}

}

#######################################
# Brief:
#   Start this script. 
# Globals:
#   PROCFILE 
#   ENVFILE 
#   WORK_TMP
#   PROCFILE_PID
# Arguments:
#   PROCFILE 
#   ENVFILE 
# Returns:
#   succ : 0
#   fail : 1
#######################################
function main() {

    mkdir -p "${WORK_TMP}"
    :> "${PROCFILE_PID}"

    procfile="${PROCFILE}"
    envfile="${ENVFILE}"

    while getopts "hcf:e:" opt ; do
        case ${opt} in
            h)  usage ;;
            c)  checkflag=true ;;
            f)  procfile=${OPTARG} ;;
            e)  envfile=${OPTARG} ;;
            *)  usage ;;
        esac
    done

    if "${checkflag}" ; then
        err_info=$( verify )
        echo "${err_info}"
        [[ -z "${err_info}" ]] && return 0 ||  return 1 
    fi
    load_env_file
    trap " kill_proc " TERM INT
    run_procfile
}
main "$@"
