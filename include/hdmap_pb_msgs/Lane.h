// Generated by gencpp from file hdmap_pb_msgs/Lane.msg
// DO NOT EDIT!


#ifndef HDMAP_PB_MSGS_MESSAGE_LANE_H
#define HDMAP_PB_MSGS_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Curve.h>
#include <hdmap_pb_msgs/LaneBoundary.h>
#include <hdmap_pb_msgs/LaneBoundary.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/Id.h>
#include <hdmap_pb_msgs/LaneSampleAssociation.h>
#include <hdmap_pb_msgs/LaneSampleAssociation.h>

namespace hdmap_pb_msgs
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : id()
    , type(0)
    , turn(0)
    , central_curve()
    , left_boundary()
    , right_boundary()
    , width(0.0)
    , length(0.0)
    , speed_limit(0.0)
    , overlap_id()
    , predecessor_id()
    , successor_id()
    , left_neighbor_forward_lane_id()
    , right_neighbor_forward_lane_id()
    , left_neighbor_reverse_lane_id()
    , right_neighbor_reverse_lane_id()
    , stop_sign_id()
    , junction_id()
    , crosswalk_id()
    , yield_sign_id()
    , left_sample()
    , right_sample()  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(0)
    , turn(0)
    , central_curve(_alloc)
    , left_boundary(_alloc)
    , right_boundary(_alloc)
    , width(0.0)
    , length(0.0)
    , speed_limit(0.0)
    , overlap_id(_alloc)
    , predecessor_id(_alloc)
    , successor_id(_alloc)
    , left_neighbor_forward_lane_id(_alloc)
    , right_neighbor_forward_lane_id(_alloc)
    , left_neighbor_reverse_lane_id(_alloc)
    , right_neighbor_reverse_lane_id(_alloc)
    , stop_sign_id(_alloc)
    , junction_id(_alloc)
    , crosswalk_id(_alloc)
    , yield_sign_id(_alloc)
    , left_sample(_alloc)
    , right_sample(_alloc)  {
  (void)_alloc;
    }



   typedef  ::hdmap_pb_msgs::Id_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _turn_type;
  _turn_type turn;

   typedef  ::hdmap_pb_msgs::Curve_<ContainerAllocator>  _central_curve_type;
  _central_curve_type central_curve;

   typedef  ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator>  _left_boundary_type;
  _left_boundary_type left_boundary;

   typedef  ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator>  _right_boundary_type;
  _right_boundary_type right_boundary;

   typedef double _width_type;
  _width_type width;

   typedef double _length_type;
  _length_type length;

   typedef double _speed_limit_type;
  _speed_limit_type speed_limit;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _overlap_id_type;
  _overlap_id_type overlap_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _predecessor_id_type;
  _predecessor_id_type predecessor_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _successor_id_type;
  _successor_id_type successor_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _left_neighbor_forward_lane_id_type;
  _left_neighbor_forward_lane_id_type left_neighbor_forward_lane_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _right_neighbor_forward_lane_id_type;
  _right_neighbor_forward_lane_id_type right_neighbor_forward_lane_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _left_neighbor_reverse_lane_id_type;
  _left_neighbor_reverse_lane_id_type left_neighbor_reverse_lane_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _right_neighbor_reverse_lane_id_type;
  _right_neighbor_reverse_lane_id_type right_neighbor_reverse_lane_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _stop_sign_id_type;
  _stop_sign_id_type stop_sign_id;

   typedef  ::hdmap_pb_msgs::Id_<ContainerAllocator>  _junction_id_type;
  _junction_id_type junction_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _crosswalk_id_type;
  _crosswalk_id_type crosswalk_id;

   typedef std::vector< ::hdmap_pb_msgs::Id_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::other >  _yield_sign_id_type;
  _yield_sign_id_type yield_sign_id;

   typedef std::vector< ::hdmap_pb_msgs::LaneSampleAssociation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::LaneSampleAssociation_<ContainerAllocator> >::other >  _left_sample_type;
  _left_sample_type left_sample;

   typedef std::vector< ::hdmap_pb_msgs::LaneSampleAssociation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::LaneSampleAssociation_<ContainerAllocator> >::other >  _right_sample_type;
  _right_sample_type right_sample;




  typedef boost::shared_ptr< ::hdmap_pb_msgs::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hdmap_pb_msgs::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::hdmap_pb_msgs::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::hdmap_pb_msgs::Lane > LanePtr;
typedef boost::shared_ptr< ::hdmap_pb_msgs::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hdmap_pb_msgs::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hdmap_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'hdmap_pb_msgs': ['/home/scmbuild/workspaces_cluster.tmp/tmp.20161206.225249.22574/baidu/adu/ros/pb_msgs/hdmap_pb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c727327a059aae36c399385b0171681";
  }

  static const char* value(const ::hdmap_pb_msgs::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c727327a059aae3ULL;
  static const uint64_t static_value2 = 0x6c399385b0171681ULL;
};

template<class ContainerAllocator>
struct DataType< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hdmap_pb_msgs/Lane";
  }

  static const char* value(const ::hdmap_pb_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Id id \n\
int32 type \n\
int32 turn \n\
Curve central_curve \n\
LaneBoundary left_boundary \n\
LaneBoundary right_boundary \n\
float64 width \n\
float64 length \n\
float64 speed_limit \n\
Id[] overlap_id \n\
Id[] predecessor_id \n\
Id[] successor_id \n\
Id[] left_neighbor_forward_lane_id \n\
Id[] right_neighbor_forward_lane_id \n\
Id[] left_neighbor_reverse_lane_id \n\
Id[] right_neighbor_reverse_lane_id \n\
Id[] stop_sign_id \n\
Id junction_id \n\
Id[] crosswalk_id \n\
Id[] yield_sign_id \n\
LaneSampleAssociation[] left_sample \n\
LaneSampleAssociation[] right_sample \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Id\n\
int8 id \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Curve\n\
CurveSegment[] segment \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/CurveSegment\n\
LineSegment line_segment \n\
Arc arc \n\
Spiral spiral \n\
Spline spline \n\
Poly3 poly3 \n\
float64 s \n\
Point start_position \n\
float64 heading \n\
float64 length \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/LineSegment\n\
Point[] point \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Point\n\
float64 x \n\
float64 y \n\
float64 z \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Arc\n\
Point center \n\
float64 radius \n\
float64 start_angle \n\
float64 end_angle \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Spiral\n\
float64 curv_start \n\
float64 curv_end \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Spline\n\
int32 dimension \n\
int32 degree \n\
float64[] knot \n\
Point[] control \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Poly3\n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/LaneBoundary\n\
Curve curve \n\
int32 type \n\
float64 length \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/LaneSampleAssociation\n\
float64 s \n\
float64 width \n\
";
  }

  static const char* value(const ::hdmap_pb_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.turn);
      stream.next(m.central_curve);
      stream.next(m.left_boundary);
      stream.next(m.right_boundary);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.speed_limit);
      stream.next(m.overlap_id);
      stream.next(m.predecessor_id);
      stream.next(m.successor_id);
      stream.next(m.left_neighbor_forward_lane_id);
      stream.next(m.right_neighbor_forward_lane_id);
      stream.next(m.left_neighbor_reverse_lane_id);
      stream.next(m.right_neighbor_reverse_lane_id);
      stream.next(m.stop_sign_id);
      stream.next(m.junction_id);
      stream.next(m.crosswalk_id);
      stream.next(m.yield_sign_id);
      stream.next(m.left_sample);
      stream.next(m.right_sample);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hdmap_pb_msgs::Lane_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    s << std::endl;
    Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "turn: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn);
    s << indent << "central_curve: ";
    s << std::endl;
    Printer< ::hdmap_pb_msgs::Curve_<ContainerAllocator> >::stream(s, indent + "  ", v.central_curve);
    s << indent << "left_boundary: ";
    s << std::endl;
    Printer< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >::stream(s, indent + "  ", v.left_boundary);
    s << indent << "right_boundary: ";
    s << std::endl;
    Printer< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >::stream(s, indent + "  ", v.right_boundary);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "speed_limit: ";
    Printer<double>::stream(s, indent + "  ", v.speed_limit);
    s << indent << "overlap_id[]" << std::endl;
    for (size_t i = 0; i < v.overlap_id.size(); ++i)
    {
      s << indent << "  overlap_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.overlap_id[i]);
    }
    s << indent << "predecessor_id[]" << std::endl;
    for (size_t i = 0; i < v.predecessor_id.size(); ++i)
    {
      s << indent << "  predecessor_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.predecessor_id[i]);
    }
    s << indent << "successor_id[]" << std::endl;
    for (size_t i = 0; i < v.successor_id.size(); ++i)
    {
      s << indent << "  successor_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.successor_id[i]);
    }
    s << indent << "left_neighbor_forward_lane_id[]" << std::endl;
    for (size_t i = 0; i < v.left_neighbor_forward_lane_id.size(); ++i)
    {
      s << indent << "  left_neighbor_forward_lane_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.left_neighbor_forward_lane_id[i]);
    }
    s << indent << "right_neighbor_forward_lane_id[]" << std::endl;
    for (size_t i = 0; i < v.right_neighbor_forward_lane_id.size(); ++i)
    {
      s << indent << "  right_neighbor_forward_lane_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.right_neighbor_forward_lane_id[i]);
    }
    s << indent << "left_neighbor_reverse_lane_id[]" << std::endl;
    for (size_t i = 0; i < v.left_neighbor_reverse_lane_id.size(); ++i)
    {
      s << indent << "  left_neighbor_reverse_lane_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.left_neighbor_reverse_lane_id[i]);
    }
    s << indent << "right_neighbor_reverse_lane_id[]" << std::endl;
    for (size_t i = 0; i < v.right_neighbor_reverse_lane_id.size(); ++i)
    {
      s << indent << "  right_neighbor_reverse_lane_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.right_neighbor_reverse_lane_id[i]);
    }
    s << indent << "stop_sign_id[]" << std::endl;
    for (size_t i = 0; i < v.stop_sign_id.size(); ++i)
    {
      s << indent << "  stop_sign_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.stop_sign_id[i]);
    }
    s << indent << "junction_id: ";
    s << std::endl;
    Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "  ", v.junction_id);
    s << indent << "crosswalk_id[]" << std::endl;
    for (size_t i = 0; i < v.crosswalk_id.size(); ++i)
    {
      s << indent << "  crosswalk_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.crosswalk_id[i]);
    }
    s << indent << "yield_sign_id[]" << std::endl;
    for (size_t i = 0; i < v.yield_sign_id.size(); ++i)
    {
      s << indent << "  yield_sign_id[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Id_<ContainerAllocator> >::stream(s, indent + "    ", v.yield_sign_id[i]);
    }
    s << indent << "left_sample[]" << std::endl;
    for (size_t i = 0; i < v.left_sample.size(); ++i)
    {
      s << indent << "  left_sample[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::LaneSampleAssociation_<ContainerAllocator> >::stream(s, indent + "    ", v.left_sample[i]);
    }
    s << indent << "right_sample[]" << std::endl;
    for (size_t i = 0; i < v.right_sample.size(); ++i)
    {
      s << indent << "  right_sample[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::LaneSampleAssociation_<ContainerAllocator> >::stream(s, indent + "    ", v.right_sample[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HDMAP_PB_MSGS_MESSAGE_LANE_H
