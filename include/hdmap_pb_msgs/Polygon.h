// Generated by gencpp from file hdmap_pb_msgs/Polygon.msg
// DO NOT EDIT!


#ifndef HDMAP_PB_MSGS_MESSAGE_POLYGON_H
#define HDMAP_PB_MSGS_MESSAGE_POLYGON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hdmap_pb_msgs/Point.h>

namespace hdmap_pb_msgs
{
template <class ContainerAllocator>
struct Polygon_
{
  typedef Polygon_<ContainerAllocator> Type;

  Polygon_()
    : point()  {
    }
  Polygon_(const ContainerAllocator& _alloc)
    : point(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::hdmap_pb_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Point_<ContainerAllocator> >::other >  _point_type;
  _point_type point;




  typedef boost::shared_ptr< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> const> ConstPtr;

}; // struct Polygon_

typedef ::hdmap_pb_msgs::Polygon_<std::allocator<void> > Polygon;

typedef boost::shared_ptr< ::hdmap_pb_msgs::Polygon > PolygonPtr;
typedef boost::shared_ptr< ::hdmap_pb_msgs::Polygon const> PolygonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hdmap_pb_msgs::Polygon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hdmap_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'hdmap_pb_msgs': ['/home/scmbuild/workspaces_cluster.tmp/tmp.20161206.225249.22574/baidu/adu/ros/pb_msgs/hdmap_pb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7c84ff13976aa04656e56e300124444";
  }

  static const char* value(const ::hdmap_pb_msgs::Polygon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7c84ff13976aa04ULL;
  static const uint64_t static_value2 = 0x656e56e300124444ULL;
};

template<class ContainerAllocator>
struct DataType< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hdmap_pb_msgs/Polygon";
  }

  static const char* value(const ::hdmap_pb_msgs::Polygon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point[] point \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Point\n\
float64 x \n\
float64 y \n\
float64 z \n\
";
  }

  static const char* value(const ::hdmap_pb_msgs::Polygon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Polygon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hdmap_pb_msgs::Polygon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hdmap_pb_msgs::Polygon_<ContainerAllocator>& v)
  {
    s << indent << "point[]" << std::endl;
    for (size_t i = 0; i < v.point.size(); ++i)
    {
      s << indent << "  point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.point[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HDMAP_PB_MSGS_MESSAGE_POLYGON_H
