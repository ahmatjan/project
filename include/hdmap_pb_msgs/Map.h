// Generated by gencpp from file hdmap_pb_msgs/Map.msg
// DO NOT EDIT!


#ifndef HDMAP_PB_MSGS_MESSAGE_MAP_H
#define HDMAP_PB_MSGS_MESSAGE_MAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hdmap_pb_msgs/Header.h>
#include <hdmap_pb_msgs/Crosswalk.h>
#include <hdmap_pb_msgs/Junction.h>
#include <hdmap_pb_msgs/Lane.h>
#include <hdmap_pb_msgs/StopSign.h>
#include <hdmap_pb_msgs/Signal.h>
#include <hdmap_pb_msgs/YieldSign.h>
#include <hdmap_pb_msgs/Overlap.h>

namespace hdmap_pb_msgs
{
template <class ContainerAllocator>
struct Map_
{
  typedef Map_<ContainerAllocator> Type;

  Map_()
    : header()
    , crosswalk()
    , junction()
    , lane()
    , stop_sign()
    , signal()
    , yieldX()
    , overlap()  {
    }
  Map_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , crosswalk(_alloc)
    , junction(_alloc)
    , lane(_alloc)
    , stop_sign(_alloc)
    , signal(_alloc)
    , yieldX(_alloc)
    , overlap(_alloc)  {
  (void)_alloc;
    }



   typedef  ::hdmap_pb_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::hdmap_pb_msgs::Crosswalk_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Crosswalk_<ContainerAllocator> >::other >  _crosswalk_type;
  _crosswalk_type crosswalk;

   typedef std::vector< ::hdmap_pb_msgs::Junction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Junction_<ContainerAllocator> >::other >  _junction_type;
  _junction_type junction;

   typedef std::vector< ::hdmap_pb_msgs::Lane_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >::other >  _lane_type;
  _lane_type lane;

   typedef std::vector< ::hdmap_pb_msgs::StopSign_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::StopSign_<ContainerAllocator> >::other >  _stop_sign_type;
  _stop_sign_type stop_sign;

   typedef std::vector< ::hdmap_pb_msgs::Signal_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Signal_<ContainerAllocator> >::other >  _signal_type;
  _signal_type signal;

   typedef std::vector< ::hdmap_pb_msgs::YieldSign_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::YieldSign_<ContainerAllocator> >::other >  _yieldX_type;
  _yieldX_type yieldX;

   typedef std::vector< ::hdmap_pb_msgs::Overlap_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hdmap_pb_msgs::Overlap_<ContainerAllocator> >::other >  _overlap_type;
  _overlap_type overlap;




  typedef boost::shared_ptr< ::hdmap_pb_msgs::Map_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hdmap_pb_msgs::Map_<ContainerAllocator> const> ConstPtr;

}; // struct Map_

typedef ::hdmap_pb_msgs::Map_<std::allocator<void> > Map;

typedef boost::shared_ptr< ::hdmap_pb_msgs::Map > MapPtr;
typedef boost::shared_ptr< ::hdmap_pb_msgs::Map const> MapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hdmap_pb_msgs::Map_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hdmap_pb_msgs::Map_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hdmap_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'hdmap_pb_msgs': ['/home/scmbuild/workspaces_cluster.tmp/tmp.20161206.225249.22574/baidu/adu/ros/pb_msgs/hdmap_pb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::Map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::Map_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::Map_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::Map_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::Map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::Map_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hdmap_pb_msgs::Map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83626360938f309d85beab03f51d0bb3";
  }

  static const char* value(const ::hdmap_pb_msgs::Map_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83626360938f309dULL;
  static const uint64_t static_value2 = 0x85beab03f51d0bb3ULL;
};

template<class ContainerAllocator>
struct DataType< ::hdmap_pb_msgs::Map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hdmap_pb_msgs/Map";
  }

  static const char* value(const ::hdmap_pb_msgs::Map_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hdmap_pb_msgs::Map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hdmap_pb_msgs/Header header \n\
Crosswalk[] crosswalk \n\
Junction[] junction \n\
Lane[] lane \n\
StopSign[] stop_sign \n\
Signal[] signal \n\
YieldSign[] yieldX \n\
Overlap[] overlap \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Header\n\
int8 version \n\
int8 date \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Crosswalk\n\
Id id \n\
Polygon polygon \n\
Id[] overlap_id \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Id\n\
int8 id \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Polygon\n\
Point[] point \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Point\n\
float64 x \n\
float64 y \n\
float64 z \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Junction\n\
Id id \n\
Polygon polygon \n\
Id[] crosswalk_id \n\
Id[] overlap_id \n\
int32 num_road_segments \n\
Id[] lane_id \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Lane\n\
Id id \n\
int32 type \n\
int32 turn \n\
Curve central_curve \n\
LaneBoundary left_boundary \n\
LaneBoundary right_boundary \n\
float64 width \n\
float64 length \n\
float64 speed_limit \n\
Id[] overlap_id \n\
Id[] predecessor_id \n\
Id[] successor_id \n\
Id[] left_neighbor_forward_lane_id \n\
Id[] right_neighbor_forward_lane_id \n\
Id[] left_neighbor_reverse_lane_id \n\
Id[] right_neighbor_reverse_lane_id \n\
Id[] stop_sign_id \n\
Id junction_id \n\
Id[] crosswalk_id \n\
Id[] yield_sign_id \n\
LaneSampleAssociation[] left_sample \n\
LaneSampleAssociation[] right_sample \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Curve\n\
CurveSegment[] segment \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/CurveSegment\n\
LineSegment line_segment \n\
Arc arc \n\
Spiral spiral \n\
Spline spline \n\
Poly3 poly3 \n\
float64 s \n\
Point start_position \n\
float64 heading \n\
float64 length \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/LineSegment\n\
Point[] point \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Arc\n\
Point center \n\
float64 radius \n\
float64 start_angle \n\
float64 end_angle \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Spiral\n\
float64 curv_start \n\
float64 curv_end \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Spline\n\
int32 dimension \n\
int32 degree \n\
float64[] knot \n\
Point[] control \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Poly3\n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/LaneBoundary\n\
Curve curve \n\
int32 type \n\
float64 length \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/LaneSampleAssociation\n\
float64 s \n\
float64 width \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/StopSign\n\
Id id \n\
Curve stop_line \n\
Point location \n\
Id[] overlap_id \n\
Id signal_id \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Signal\n\
Id id \n\
Polygon boundary \n\
Subsignal[] subsignal \n\
Id[] overlap_id \n\
int32 type \n\
Curve[] stop_line \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Subsignal\n\
Id id \n\
int32 type \n\
Point location \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/YieldSign\n\
Id id \n\
Curve stop_line \n\
Point location \n\
Id[] overlap_id \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Overlap\n\
Id id \n\
ObjectOverlapInfo[] object \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/ObjectOverlapInfo\n\
Id id \n\
LaneOverlapInfo lane_overlap_info \n\
SignalOverlapInfo signal_overlap_info \n\
StopSignOverlapInfo stop_sign_overlap_info \n\
CrosswalkOverlapInfo crosswalk_overlap_info \n\
JunctionOverlapInfo junction_overlap_info \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/LaneOverlapInfo\n\
float64 start_s \n\
float64 end_s \n\
bool is_merge \n\
bool has_precedence \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/SignalOverlapInfo\n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/StopSignOverlapInfo\n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/CrosswalkOverlapInfo\n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/JunctionOverlapInfo\n\
";
  }

  static const char* value(const ::hdmap_pb_msgs::Map_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hdmap_pb_msgs::Map_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.crosswalk);
      stream.next(m.junction);
      stream.next(m.lane);
      stream.next(m.stop_sign);
      stream.next(m.signal);
      stream.next(m.yieldX);
      stream.next(m.overlap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Map_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hdmap_pb_msgs::Map_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hdmap_pb_msgs::Map_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::hdmap_pb_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "crosswalk[]" << std::endl;
    for (size_t i = 0; i < v.crosswalk.size(); ++i)
    {
      s << indent << "  crosswalk[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Crosswalk_<ContainerAllocator> >::stream(s, indent + "    ", v.crosswalk[i]);
    }
    s << indent << "junction[]" << std::endl;
    for (size_t i = 0; i < v.junction.size(); ++i)
    {
      s << indent << "  junction[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Junction_<ContainerAllocator> >::stream(s, indent + "    ", v.junction[i]);
    }
    s << indent << "lane[]" << std::endl;
    for (size_t i = 0; i < v.lane.size(); ++i)
    {
      s << indent << "  lane[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Lane_<ContainerAllocator> >::stream(s, indent + "    ", v.lane[i]);
    }
    s << indent << "stop_sign[]" << std::endl;
    for (size_t i = 0; i < v.stop_sign.size(); ++i)
    {
      s << indent << "  stop_sign[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::StopSign_<ContainerAllocator> >::stream(s, indent + "    ", v.stop_sign[i]);
    }
    s << indent << "signal[]" << std::endl;
    for (size_t i = 0; i < v.signal.size(); ++i)
    {
      s << indent << "  signal[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Signal_<ContainerAllocator> >::stream(s, indent + "    ", v.signal[i]);
    }
    s << indent << "yieldX[]" << std::endl;
    for (size_t i = 0; i < v.yieldX.size(); ++i)
    {
      s << indent << "  yieldX[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::YieldSign_<ContainerAllocator> >::stream(s, indent + "    ", v.yieldX[i]);
    }
    s << indent << "overlap[]" << std::endl;
    for (size_t i = 0; i < v.overlap.size(); ++i)
    {
      s << indent << "  overlap[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hdmap_pb_msgs::Overlap_<ContainerAllocator> >::stream(s, indent + "    ", v.overlap[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HDMAP_PB_MSGS_MESSAGE_MAP_H
