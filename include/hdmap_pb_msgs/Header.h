// Generated by gencpp from file hdmap_pb_msgs/Header.msg
// DO NOT EDIT!


#ifndef HDMAP_PB_MSGS_MESSAGE_HEADER_H
#define HDMAP_PB_MSGS_MESSAGE_HEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hdmap_pb_msgs
{
template <class ContainerAllocator>
struct Header_
{
  typedef Header_<ContainerAllocator> Type;

  Header_()
    : version(0)
    , date(0)  {
    }
  Header_(const ContainerAllocator& _alloc)
    : version(0)
    , date(0)  {
  (void)_alloc;
    }



   typedef int8_t _version_type;
  _version_type version;

   typedef int8_t _date_type;
  _date_type date;




  typedef boost::shared_ptr< ::hdmap_pb_msgs::Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hdmap_pb_msgs::Header_<ContainerAllocator> const> ConstPtr;

}; // struct Header_

typedef ::hdmap_pb_msgs::Header_<std::allocator<void> > Header;

typedef boost::shared_ptr< ::hdmap_pb_msgs::Header > HeaderPtr;
typedef boost::shared_ptr< ::hdmap_pb_msgs::Header const> HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hdmap_pb_msgs::Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hdmap_pb_msgs::Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hdmap_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'hdmap_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/hdmap_pb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hdmap_pb_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0895db18dd17cfe60003b808a98a8084";
  }

  static const char* value(const ::hdmap_pb_msgs::Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0895db18dd17cfe6ULL;
  static const uint64_t static_value2 = 0x0003b808a98a8084ULL;
};

template<class ContainerAllocator>
struct DataType< ::hdmap_pb_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hdmap_pb_msgs/Header";
  }

  static const char* value(const ::hdmap_pb_msgs::Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hdmap_pb_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 version \n\
int8 date \n\
";
  }

  static const char* value(const ::hdmap_pb_msgs::Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hdmap_pb_msgs::Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.version);
      stream.next(m.date);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hdmap_pb_msgs::Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hdmap_pb_msgs::Header_<ContainerAllocator>& v)
  {
    s << indent << "version: ";
    Printer<int8_t>::stream(s, indent + "  ", v.version);
    s << indent << "date: ";
    Printer<int8_t>::stream(s, indent + "  ", v.date);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HDMAP_PB_MSGS_MESSAGE_HEADER_H
