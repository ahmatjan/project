// Generated by gencpp from file hdmap_pb_msgs/LaneBoundary.msg
// DO NOT EDIT!


#ifndef HDMAP_PB_MSGS_MESSAGE_LANEBOUNDARY_H
#define HDMAP_PB_MSGS_MESSAGE_LANEBOUNDARY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hdmap_pb_msgs/Curve.h>

namespace hdmap_pb_msgs
{
template <class ContainerAllocator>
struct LaneBoundary_
{
  typedef LaneBoundary_<ContainerAllocator> Type;

  LaneBoundary_()
    : curve()
    , type(0)
    , length(0.0)  {
    }
  LaneBoundary_(const ContainerAllocator& _alloc)
    : curve(_alloc)
    , type(0)
    , length(0.0)  {
  (void)_alloc;
    }



   typedef  ::hdmap_pb_msgs::Curve_<ContainerAllocator>  _curve_type;
  _curve_type curve;

   typedef int32_t _type_type;
  _type_type type;

   typedef double _length_type;
  _length_type length;




  typedef boost::shared_ptr< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> const> ConstPtr;

}; // struct LaneBoundary_

typedef ::hdmap_pb_msgs::LaneBoundary_<std::allocator<void> > LaneBoundary;

typedef boost::shared_ptr< ::hdmap_pb_msgs::LaneBoundary > LaneBoundaryPtr;
typedef boost::shared_ptr< ::hdmap_pb_msgs::LaneBoundary const> LaneBoundaryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hdmap_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'hdmap_pb_msgs': ['/home/scmbuild/workspaces_cluster.tmp/tmp.20161206.225249.22574/baidu/adu/ros/pb_msgs/hdmap_pb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9eb3bfaf6ce2ab83411a6c2b48625d75";
  }

  static const char* value(const ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9eb3bfaf6ce2ab83ULL;
  static const uint64_t static_value2 = 0x411a6c2b48625d75ULL;
};

template<class ContainerAllocator>
struct DataType< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hdmap_pb_msgs/LaneBoundary";
  }

  static const char* value(const ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Curve curve \n\
int32 type \n\
float64 length \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Curve\n\
CurveSegment[] segment \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/CurveSegment\n\
LineSegment line_segment \n\
Arc arc \n\
Spiral spiral \n\
Spline spline \n\
Poly3 poly3 \n\
float64 s \n\
Point start_position \n\
float64 heading \n\
float64 length \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/LineSegment\n\
Point[] point \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Point\n\
float64 x \n\
float64 y \n\
float64 z \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Arc\n\
Point center \n\
float64 radius \n\
float64 start_angle \n\
float64 end_angle \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Spiral\n\
float64 curv_start \n\
float64 curv_end \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Spline\n\
int32 dimension \n\
int32 degree \n\
float64[] knot \n\
Point[] control \n\
\n\
================================================================================\n\
MSG: hdmap_pb_msgs/Poly3\n\
";
  }

  static const char* value(const ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curve);
      stream.next(m.type);
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LaneBoundary_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hdmap_pb_msgs::LaneBoundary_<ContainerAllocator>& v)
  {
    s << indent << "curve: ";
    s << std::endl;
    Printer< ::hdmap_pb_msgs::Curve_<ContainerAllocator> >::stream(s, indent + "  ", v.curve);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HDMAP_PB_MSGS_MESSAGE_LANEBOUNDARY_H
