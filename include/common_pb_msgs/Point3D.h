// Generated by gencpp from file common_pb_msgs/Point3D.msg
// DO NOT EDIT!


#ifndef COMMON_PB_MSGS_MESSAGE_POINT3D_H
#define COMMON_PB_MSGS_MESSAGE_POINT3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_pb_msgs
{
template <class ContainerAllocator>
struct Point3D_
{
  typedef Point3D_<ContainerAllocator> Type;

  Point3D_()
    : x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  Point3D_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;




  typedef boost::shared_ptr< ::common_pb_msgs::Point3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_pb_msgs::Point3D_<ContainerAllocator> const> ConstPtr;

}; // struct Point3D_

typedef ::common_pb_msgs::Point3D_<std::allocator<void> > Point3D;

typedef boost::shared_ptr< ::common_pb_msgs::Point3D > Point3DPtr;
typedef boost::shared_ptr< ::common_pb_msgs::Point3D const> Point3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_pb_msgs::Point3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_pb_msgs::Point3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/common_pb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_pb_msgs::Point3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_pb_msgs::Point3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_pb_msgs::Point3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_pb_msgs::Point3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_pb_msgs::Point3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_pb_msgs::Point3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_pb_msgs::Point3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a842b65f413084dc2b10fb484ea7f17";
  }

  static const char* value(const ::common_pb_msgs::Point3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a842b65f413084dULL;
  static const uint64_t static_value2 = 0xc2b10fb484ea7f17ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_pb_msgs::Point3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_pb_msgs/Point3D";
  }

  static const char* value(const ::common_pb_msgs::Point3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_pb_msgs::Point3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x \n\
float64 y \n\
float64 z \n\
";
  }

  static const char* value(const ::common_pb_msgs::Point3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_pb_msgs::Point3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Point3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_pb_msgs::Point3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_pb_msgs::Point3D_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_PB_MSGS_MESSAGE_POINT3D_H
