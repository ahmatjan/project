// Generated by gencpp from file common_pb_msgs/Quaternion.msg
// DO NOT EDIT!


#ifndef COMMON_PB_MSGS_MESSAGE_QUATERNION_H
#define COMMON_PB_MSGS_MESSAGE_QUATERNION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_pb_msgs
{
template <class ContainerAllocator>
struct Quaternion_
{
  typedef Quaternion_<ContainerAllocator> Type;

  Quaternion_()
    : qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , qw(0.0)  {
    }
  Quaternion_(const ContainerAllocator& _alloc)
    : qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , qw(0.0)  {
  (void)_alloc;
    }



   typedef double _qx_type;
  _qx_type qx;

   typedef double _qy_type;
  _qy_type qy;

   typedef double _qz_type;
  _qz_type qz;

   typedef double _qw_type;
  _qw_type qw;




  typedef boost::shared_ptr< ::common_pb_msgs::Quaternion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_pb_msgs::Quaternion_<ContainerAllocator> const> ConstPtr;

}; // struct Quaternion_

typedef ::common_pb_msgs::Quaternion_<std::allocator<void> > Quaternion;

typedef boost::shared_ptr< ::common_pb_msgs::Quaternion > QuaternionPtr;
typedef boost::shared_ptr< ::common_pb_msgs::Quaternion const> QuaternionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_pb_msgs::Quaternion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_pb_msgs::Quaternion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace common_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/common_pb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::common_pb_msgs::Quaternion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_pb_msgs::Quaternion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_pb_msgs::Quaternion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_pb_msgs::Quaternion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_pb_msgs::Quaternion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_pb_msgs::Quaternion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_pb_msgs::Quaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e41723dd8df2efa508384c23a439e4c";
  }

  static const char* value(const ::common_pb_msgs::Quaternion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e41723dd8df2efaULL;
  static const uint64_t static_value2 = 0x508384c23a439e4cULL;
};

template<class ContainerAllocator>
struct DataType< ::common_pb_msgs::Quaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_pb_msgs/Quaternion";
  }

  static const char* value(const ::common_pb_msgs::Quaternion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_pb_msgs::Quaternion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 qx \n\
float64 qy \n\
float64 qz \n\
float64 qw \n\
";
  }

  static const char* value(const ::common_pb_msgs::Quaternion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_pb_msgs::Quaternion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.qx);
      stream.next(m.qy);
      stream.next(m.qz);
      stream.next(m.qw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Quaternion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_pb_msgs::Quaternion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_pb_msgs::Quaternion_<ContainerAllocator>& v)
  {
    s << indent << "qx: ";
    Printer<double>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<double>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<double>::stream(s, indent + "  ", v.qz);
    s << indent << "qw: ";
    Printer<double>::stream(s, indent + "  ", v.qw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_PB_MSGS_MESSAGE_QUATERNION_H
