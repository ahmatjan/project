// Generated by gencpp from file localization_pb_msgs/Uncertainty.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_PB_MSGS_MESSAGE_UNCERTAINTY_H
#define LOCALIZATION_PB_MSGS_MESSAGE_UNCERTAINTY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <common_pb_msgs/Point3D.h>
#include <common_pb_msgs/Point3D.h>
#include <common_pb_msgs/Point3D.h>
#include <common_pb_msgs/Point3D.h>
#include <common_pb_msgs/Point3D.h>

namespace localization_pb_msgs
{
template <class ContainerAllocator>
struct Uncertainty_
{
  typedef Uncertainty_<ContainerAllocator> Type;

  Uncertainty_()
    : position_std_dev()
    , orientation_std_dev()
    , linear_velocity_std_dev()
    , linear_acceleration_std_dev()
    , angular_velocity_std_dev()  {
    }
  Uncertainty_(const ContainerAllocator& _alloc)
    : position_std_dev(_alloc)
    , orientation_std_dev(_alloc)
    , linear_velocity_std_dev(_alloc)
    , linear_acceleration_std_dev(_alloc)
    , angular_velocity_std_dev(_alloc)  {
  (void)_alloc;
    }



   typedef  ::common_pb_msgs::Point3D_<ContainerAllocator>  _position_std_dev_type;
  _position_std_dev_type position_std_dev;

   typedef  ::common_pb_msgs::Point3D_<ContainerAllocator>  _orientation_std_dev_type;
  _orientation_std_dev_type orientation_std_dev;

   typedef  ::common_pb_msgs::Point3D_<ContainerAllocator>  _linear_velocity_std_dev_type;
  _linear_velocity_std_dev_type linear_velocity_std_dev;

   typedef  ::common_pb_msgs::Point3D_<ContainerAllocator>  _linear_acceleration_std_dev_type;
  _linear_acceleration_std_dev_type linear_acceleration_std_dev;

   typedef  ::common_pb_msgs::Point3D_<ContainerAllocator>  _angular_velocity_std_dev_type;
  _angular_velocity_std_dev_type angular_velocity_std_dev;




  typedef boost::shared_ptr< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> const> ConstPtr;

}; // struct Uncertainty_

typedef ::localization_pb_msgs::Uncertainty_<std::allocator<void> > Uncertainty;

typedef boost::shared_ptr< ::localization_pb_msgs::Uncertainty > UncertaintyPtr;
typedef boost::shared_ptr< ::localization_pb_msgs::Uncertainty const> UncertaintyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization_pb_msgs::Uncertainty_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localization_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'localization_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/localization_pb_msgs/msg'], 'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a26c653df4736501b569f3e3f7250e8";
  }

  static const char* value(const ::localization_pb_msgs::Uncertainty_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a26c653df473650ULL;
  static const uint64_t static_value2 = 0x1b569f3e3f7250e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_pb_msgs/Uncertainty";
  }

  static const char* value(const ::localization_pb_msgs::Uncertainty_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_pb_msgs/Point3D position_std_dev \n\
common_pb_msgs/Point3D orientation_std_dev \n\
common_pb_msgs/Point3D linear_velocity_std_dev \n\
common_pb_msgs/Point3D linear_acceleration_std_dev \n\
common_pb_msgs/Point3D angular_velocity_std_dev \n\
\n\
================================================================================\n\
MSG: common_pb_msgs/Point3D\n\
float64 x \n\
float64 y \n\
float64 z \n\
";
  }

  static const char* value(const ::localization_pb_msgs::Uncertainty_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_std_dev);
      stream.next(m.orientation_std_dev);
      stream.next(m.linear_velocity_std_dev);
      stream.next(m.linear_acceleration_std_dev);
      stream.next(m.angular_velocity_std_dev);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Uncertainty_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization_pb_msgs::Uncertainty_<ContainerAllocator>& v)
  {
    s << indent << "position_std_dev: ";
    s << std::endl;
    Printer< ::common_pb_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.position_std_dev);
    s << indent << "orientation_std_dev: ";
    s << std::endl;
    Printer< ::common_pb_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation_std_dev);
    s << indent << "linear_velocity_std_dev: ";
    s << std::endl;
    Printer< ::common_pb_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity_std_dev);
    s << indent << "linear_acceleration_std_dev: ";
    s << std::endl;
    Printer< ::common_pb_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration_std_dev);
    s << indent << "angular_velocity_std_dev: ";
    s << std::endl;
    Printer< ::common_pb_msgs::Point3D_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity_std_dev);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_PB_MSGS_MESSAGE_UNCERTAINTY_H
