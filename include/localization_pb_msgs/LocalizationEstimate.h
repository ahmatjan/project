// Generated by gencpp from file localization_pb_msgs/LocalizationEstimate.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_PB_MSGS_MESSAGE_LOCALIZATIONESTIMATE_H
#define LOCALIZATION_PB_MSGS_MESSAGE_LOCALIZATIONESTIMATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <header_pb_msgs/Header.h>
#include <localization_pb_msgs/Pose.h>
#include <localization_pb_msgs/Uncertainty.h>

namespace localization_pb_msgs
{
template <class ContainerAllocator>
struct LocalizationEstimate_
{
  typedef LocalizationEstimate_<ContainerAllocator> Type;

  LocalizationEstimate_()
    : header()
    , pose()
    , uncertainty()  {
    }
  LocalizationEstimate_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , uncertainty(_alloc)  {
  (void)_alloc;
    }



   typedef  ::header_pb_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::localization_pb_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::localization_pb_msgs::Uncertainty_<ContainerAllocator>  _uncertainty_type;
  _uncertainty_type uncertainty;




  typedef boost::shared_ptr< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> const> ConstPtr;

}; // struct LocalizationEstimate_

typedef ::localization_pb_msgs::LocalizationEstimate_<std::allocator<void> > LocalizationEstimate;

typedef boost::shared_ptr< ::localization_pb_msgs::LocalizationEstimate > LocalizationEstimatePtr;
typedef boost::shared_ptr< ::localization_pb_msgs::LocalizationEstimate const> LocalizationEstimateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localization_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'localization_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/localization_pb_msgs/msg'], 'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "331f9aef126565b5687e341f8a2fb5c0";
  }

  static const char* value(const ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x331f9aef126565b5ULL;
  static const uint64_t static_value2 = 0x687e341f8a2fb5c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_pb_msgs/LocalizationEstimate";
  }

  static const char* value(const ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "header_pb_msgs/Header header \n\
Pose pose \n\
Uncertainty uncertainty \n\
\n\
================================================================================\n\
MSG: header_pb_msgs/Header\n\
float64 timestamp_sec \n\
string module_name \n\
uint32 sequence_num \n\
\n\
================================================================================\n\
MSG: localization_pb_msgs/Pose\n\
common_pb_msgs/PointENU position \n\
common_pb_msgs/Quaternion orientation \n\
common_pb_msgs/Point3D linear_velocity \n\
common_pb_msgs/Point3D linear_acceleration \n\
common_pb_msgs/Point3D angular_velocity \n\
\n\
================================================================================\n\
MSG: common_pb_msgs/PointENU\n\
float64 x \n\
float64 y \n\
float64 z \n\
\n\
================================================================================\n\
MSG: common_pb_msgs/Quaternion\n\
float64 qx \n\
float64 qy \n\
float64 qz \n\
float64 qw \n\
\n\
================================================================================\n\
MSG: common_pb_msgs/Point3D\n\
float64 x \n\
float64 y \n\
float64 z \n\
\n\
================================================================================\n\
MSG: localization_pb_msgs/Uncertainty\n\
common_pb_msgs/Point3D position_std_dev \n\
common_pb_msgs/Point3D orientation_std_dev \n\
common_pb_msgs/Point3D linear_velocity_std_dev \n\
common_pb_msgs/Point3D linear_acceleration_std_dev \n\
common_pb_msgs/Point3D angular_velocity_std_dev \n\
";
  }

  static const char* value(const ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.uncertainty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LocalizationEstimate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization_pb_msgs::LocalizationEstimate_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::header_pb_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::localization_pb_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "uncertainty: ";
    s << std::endl;
    Printer< ::localization_pb_msgs::Uncertainty_<ContainerAllocator> >::stream(s, indent + "  ", v.uncertainty);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_PB_MSGS_MESSAGE_LOCALIZATIONESTIMATE_H
