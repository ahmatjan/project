// Generated by gencpp from file prediction_pb_msgs/PredictionObstacle.msg
// DO NOT EDIT!


#ifndef PREDICTION_PB_MSGS_MESSAGE_PREDICTIONOBSTACLE_H
#define PREDICTION_PB_MSGS_MESSAGE_PREDICTIONOBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_pb_msgs/PerceptionObstacle.h>
#include <prediction_pb_msgs/Trajectory.h>

namespace prediction_pb_msgs
{
template <class ContainerAllocator>
struct PredictionObstacle_
{
  typedef PredictionObstacle_<ContainerAllocator> Type;

  PredictionObstacle_()
    : perception_obstacle()
    , time_stamp(0.0)
    , predicted_period(0.0)
    , trajectory()  {
    }
  PredictionObstacle_(const ContainerAllocator& _alloc)
    : perception_obstacle(_alloc)
    , time_stamp(0.0)
    , predicted_period(0.0)
    , trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef  ::perception_pb_msgs::PerceptionObstacle_<ContainerAllocator>  _perception_obstacle_type;
  _perception_obstacle_type perception_obstacle;

   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef double _predicted_period_type;
  _predicted_period_type predicted_period;

   typedef std::vector< ::prediction_pb_msgs::Trajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::prediction_pb_msgs::Trajectory_<ContainerAllocator> >::other >  _trajectory_type;
  _trajectory_type trajectory;




  typedef boost::shared_ptr< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct PredictionObstacle_

typedef ::prediction_pb_msgs::PredictionObstacle_<std::allocator<void> > PredictionObstacle;

typedef boost::shared_ptr< ::prediction_pb_msgs::PredictionObstacle > PredictionObstaclePtr;
typedef boost::shared_ptr< ::prediction_pb_msgs::PredictionObstacle const> PredictionObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prediction_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'perception_pb_msgs': ['/home/caros/ros/share/perception_pb_msgs/cmake/../msg'], 'prediction_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/prediction_pb_msgs/msg'], 'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5df16a919530bc677fda038e8beea7c2";
  }

  static const char* value(const ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5df16a919530bc67ULL;
  static const uint64_t static_value2 = 0x7fda038e8beea7c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prediction_pb_msgs/PredictionObstacle";
  }

  static const char* value(const ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_pb_msgs/PerceptionObstacle perception_obstacle \n\
float64 time_stamp \n\
float64 predicted_period \n\
Trajectory[] trajectory \n\
\n\
================================================================================\n\
MSG: perception_pb_msgs/PerceptionObstacle\n\
int32 id \n\
Point position \n\
float64 theta \n\
Point velocity \n\
float64 length \n\
float64 width \n\
float64 height \n\
Point[] polygon_point \n\
float64 tracking_time \n\
int32 type \n\
float64 timestamp \n\
\n\
================================================================================\n\
MSG: perception_pb_msgs/Point\n\
float64 x \n\
float64 y \n\
float64 z \n\
\n\
================================================================================\n\
MSG: prediction_pb_msgs/Trajectory\n\
float64 probability \n\
TrajectoryPoint[] trajectory_point \n\
\n\
================================================================================\n\
MSG: prediction_pb_msgs/TrajectoryPoint\n\
float64 x \n\
float64 y \n\
float64 z \n\
float64 velocity \n\
float64 t \n\
float64 heading \n\
";
  }

  static const char* value(const ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.perception_obstacle);
      stream.next(m.time_stamp);
      stream.next(m.predicted_period);
      stream.next(m.trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PredictionObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prediction_pb_msgs::PredictionObstacle_<ContainerAllocator>& v)
  {
    s << indent << "perception_obstacle: ";
    s << std::endl;
    Printer< ::perception_pb_msgs::PerceptionObstacle_<ContainerAllocator> >::stream(s, indent + "  ", v.perception_obstacle);
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "predicted_period: ";
    Printer<double>::stream(s, indent + "  ", v.predicted_period);
    s << indent << "trajectory[]" << std::endl;
    for (size_t i = 0; i < v.trajectory.size(); ++i)
    {
      s << indent << "  trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::prediction_pb_msgs::Trajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PREDICTION_PB_MSGS_MESSAGE_PREDICTIONOBSTACLE_H
