// Generated by gencpp from file prediction_pb_msgs/TrajectoryPoint.msg
// DO NOT EDIT!


#ifndef PREDICTION_PB_MSGS_MESSAGE_TRAJECTORYPOINT_H
#define PREDICTION_PB_MSGS_MESSAGE_TRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace prediction_pb_msgs
{
template <class ContainerAllocator>
struct TrajectoryPoint_
{
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , velocity(0.0)
    , t(0.0)
    , heading(0.0)  {
    }
  TrajectoryPoint_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , velocity(0.0)
    , t(0.0)
    , heading(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _t_type;
  _t_type t;

   typedef double _heading_type;
  _heading_type heading;




  typedef boost::shared_ptr< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPoint_

typedef ::prediction_pb_msgs::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::prediction_pb_msgs::TrajectoryPoint > TrajectoryPointPtr;
typedef boost::shared_ptr< ::prediction_pb_msgs::TrajectoryPoint const> TrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prediction_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'perception_pb_msgs': ['/home/caros/ros/share/perception_pb_msgs/cmake/../msg'], 'prediction_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/prediction_pb_msgs/msg'], 'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04e86a5f8e343f25553d5b8faff74a1f";
  }

  static const char* value(const ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04e86a5f8e343f25ULL;
  static const uint64_t static_value2 = 0x553d5b8faff74a1fULL;
};

template<class ContainerAllocator>
struct DataType< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prediction_pb_msgs/TrajectoryPoint";
  }

  static const char* value(const ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x \n\
float64 y \n\
float64 z \n\
float64 velocity \n\
float64 t \n\
float64 heading \n\
";
  }

  static const char* value(const ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.velocity);
      stream.next(m.t);
      stream.next(m.heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct TrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prediction_pb_msgs::TrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PREDICTION_PB_MSGS_MESSAGE_TRAJECTORYPOINT_H
