// Generated by gencpp from file metric_msgs/MetricStatus.msg
// DO NOT EDIT!


#ifndef METRIC_MSGS_MESSAGE_METRICSTATUS_H
#define METRIC_MSGS_MESSAGE_METRICSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <metric_msgs/KeyValue.h>

namespace metric_msgs
{
template <class ContainerAllocator>
struct MetricStatus_
{
  typedef MetricStatus_<ContainerAllocator> Type;

  MetricStatus_()
    : level(0)
    , stamp()
    , message()
    , values()  {
    }
  MetricStatus_(const ContainerAllocator& _alloc)
    : level(0)
    , stamp()
    , message(_alloc)
    , values(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _level_type;
  _level_type level;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::vector< ::metric_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::metric_msgs::KeyValue_<ContainerAllocator> >::other >  _values_type;
  _values_type values;


    enum { OK = 0u };
     enum { WARN = 1u };
     enum { ERROR = 2u };
     enum { STALE = 3u };
 

  typedef boost::shared_ptr< ::metric_msgs::MetricStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metric_msgs::MetricStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MetricStatus_

typedef ::metric_msgs::MetricStatus_<std::allocator<void> > MetricStatus;

typedef boost::shared_ptr< ::metric_msgs::MetricStatus > MetricStatusPtr;
typedef boost::shared_ptr< ::metric_msgs::MetricStatus const> MetricStatusConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metric_msgs::MetricStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metric_msgs::MetricStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace metric_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/caros/ros/share/std_msgs/cmake/../msg'], 'metric_msgs': ['/home/scmbuild/workspaces_cluster/baidu.car-os.ros/baidu/car-os/ros/common_msgs/metric_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::metric_msgs::MetricStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metric_msgs::MetricStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metric_msgs::MetricStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metric_msgs::MetricStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metric_msgs::MetricStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metric_msgs::MetricStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metric_msgs::MetricStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "376e87c0d702dd9e1244411d350ed86a";
  }

  static const char* value(const ::metric_msgs::MetricStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x376e87c0d702dd9eULL;
  static const uint64_t static_value2 = 0x1244411d350ed86aULL;
};

template<class ContainerAllocator>
struct DataType< ::metric_msgs::MetricStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metric_msgs/MetricStatus";
  }

  static const char* value(const ::metric_msgs::MetricStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metric_msgs::MetricStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 OK=0\n\
uint8 WARN=1\n\
uint8 ERROR=2\n\
uint8 STALE=3\n\
\n\
uint8 level\n\
time stamp\n\
string message\n\
KeyValue[] values\n\
\n\
================================================================================\n\
MSG: metric_msgs/KeyValue\n\
string key\n\
string value\n\
";
  }

  static const char* value(const ::metric_msgs::MetricStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metric_msgs::MetricStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.level);
      stream.next(m.stamp);
      stream.next(m.message);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MetricStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metric_msgs::MetricStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metric_msgs::MetricStatus_<ContainerAllocator>& v)
  {
    s << indent << "level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.level);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::metric_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRIC_MSGS_MESSAGE_METRICSTATUS_H
