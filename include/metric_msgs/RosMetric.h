// Generated by gencpp from file metric_msgs/RosMetric.msg
// DO NOT EDIT!


#ifndef METRIC_MSGS_MESSAGE_ROSMETRIC_H
#define METRIC_MSGS_MESSAGE_ROSMETRIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace metric_msgs
{
template <class ContainerAllocator>
struct RosMetric_
{
  typedef RosMetric_<ContainerAllocator> Type;

  RosMetric_()
    : group()
    , name()
    , testtype(0)
    , testfunc()
    , testargs()
    , oneshot(0)
    , period(0)
    , status(0)  {
    }
  RosMetric_(const ContainerAllocator& _alloc)
    : group(_alloc)
    , name(_alloc)
    , testtype(0)
    , testfunc(_alloc)
    , testargs(_alloc)
    , oneshot(0)
    , period(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_type;
  _group_type group;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint32_t _testtype_type;
  _testtype_type testtype;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _testfunc_type;
  _testfunc_type testfunc;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _testargs_type;
  _testargs_type testargs;

   typedef int32_t _oneshot_type;
  _oneshot_type oneshot;

   typedef uint32_t _period_type;
  _period_type period;

   typedef int32_t _status_type;
  _status_type status;




  typedef boost::shared_ptr< ::metric_msgs::RosMetric_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::metric_msgs::RosMetric_<ContainerAllocator> const> ConstPtr;

}; // struct RosMetric_

typedef ::metric_msgs::RosMetric_<std::allocator<void> > RosMetric;

typedef boost::shared_ptr< ::metric_msgs::RosMetric > RosMetricPtr;
typedef boost::shared_ptr< ::metric_msgs::RosMetric const> RosMetricConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::metric_msgs::RosMetric_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::metric_msgs::RosMetric_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace metric_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/caros/ros/share/std_msgs/cmake/../msg'], 'metric_msgs': ['/home/scmbuild/workspaces_cluster/baidu.car-os.ros/baidu/car-os/ros/common_msgs/metric_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::metric_msgs::RosMetric_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::metric_msgs::RosMetric_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metric_msgs::RosMetric_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::metric_msgs::RosMetric_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metric_msgs::RosMetric_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::metric_msgs::RosMetric_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::metric_msgs::RosMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8813be7c9e09f78b73d1aa99c1f18f6";
  }

  static const char* value(const ::metric_msgs::RosMetric_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8813be7c9e09f78ULL;
  static const uint64_t static_value2 = 0xb73d1aa99c1f18f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::metric_msgs::RosMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "metric_msgs/RosMetric";
  }

  static const char* value(const ::metric_msgs::RosMetric_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::metric_msgs::RosMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string group\n\
string name\n\
uint32  testtype\n\
string testfunc\n\
string testargs\n\
int32 oneshot\n\
uint32 period\n\
int32 status\n\
";
  }

  static const char* value(const ::metric_msgs::RosMetric_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::metric_msgs::RosMetric_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group);
      stream.next(m.name);
      stream.next(m.testtype);
      stream.next(m.testfunc);
      stream.next(m.testargs);
      stream.next(m.oneshot);
      stream.next(m.period);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RosMetric_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::metric_msgs::RosMetric_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::metric_msgs::RosMetric_<ContainerAllocator>& v)
  {
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "testtype: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.testtype);
    s << indent << "testfunc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.testfunc);
    s << indent << "testargs: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.testargs);
    s << indent << "oneshot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.oneshot);
    s << indent << "period: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.period);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // METRIC_MSGS_MESSAGE_ROSMETRIC_H
