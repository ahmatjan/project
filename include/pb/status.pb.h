// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#ifndef PROTOBUF_status_2eproto__INCLUDED
#define PROTOBUF_status_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace adu {
namespace common {
namespace metric {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_status_2eproto();
void protobuf_AssignDesc_status_2eproto();
void protobuf_ShutdownFile_status_2eproto();

class NodeStatus;

// ===================================================================

class NodeStatus : public ::google::protobuf::Message {
 public:
  NodeStatus();
  virtual ~NodeStatus();

  NodeStatus(const NodeStatus& from);

  inline NodeStatus& operator=(const NodeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeStatus& default_instance();

  void Swap(NodeStatus* other);

  // implements Message ----------------------------------------------

  NodeStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeStatus& from);
  void MergeFrom(const NodeStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional double timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // optional int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated .adu.common.metric.NodeStatus detail = 4;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 4;
  inline const ::adu::common::metric::NodeStatus& detail(int index) const;
  inline ::adu::common::metric::NodeStatus* mutable_detail(int index);
  inline ::adu::common::metric::NodeStatus* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::adu::common::metric::NodeStatus >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::adu::common::metric::NodeStatus >*
      mutable_detail();

  // @@protoc_insertion_point(class_scope:adu.common.metric.NodeStatus)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  double timestamp_;
  ::google::protobuf::RepeatedPtrField< ::adu::common::metric::NodeStatus > detail_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_status_2eproto();
  friend void protobuf_AssignDesc_status_2eproto();
  friend void protobuf_ShutdownFile_status_2eproto();

  void InitAsDefaultInstance();
  static NodeStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// NodeStatus

// optional string name = 1;
inline bool NodeStatus::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeStatus::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeStatus::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeStatus::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NodeStatus::name() const {
  // @@protoc_insertion_point(field_get:adu.common.metric.NodeStatus.name)
  return *name_;
}
inline void NodeStatus::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:adu.common.metric.NodeStatus.name)
}
inline void NodeStatus::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:adu.common.metric.NodeStatus.name)
}
inline void NodeStatus::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:adu.common.metric.NodeStatus.name)
}
inline ::std::string* NodeStatus::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:adu.common.metric.NodeStatus.name)
  return name_;
}
inline ::std::string* NodeStatus::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NodeStatus::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:adu.common.metric.NodeStatus.name)
}

// optional double timestamp = 2;
inline bool NodeStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeStatus::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double NodeStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:adu.common.metric.NodeStatus.timestamp)
  return timestamp_;
}
inline void NodeStatus::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:adu.common.metric.NodeStatus.timestamp)
}

// optional int32 status = 3;
inline bool NodeStatus::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeStatus::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 NodeStatus::status() const {
  // @@protoc_insertion_point(field_get:adu.common.metric.NodeStatus.status)
  return status_;
}
inline void NodeStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:adu.common.metric.NodeStatus.status)
}

// repeated .adu.common.metric.NodeStatus detail = 4;
inline int NodeStatus::detail_size() const {
  return detail_.size();
}
inline void NodeStatus::clear_detail() {
  detail_.Clear();
}
inline const ::adu::common::metric::NodeStatus& NodeStatus::detail(int index) const {
  // @@protoc_insertion_point(field_get:adu.common.metric.NodeStatus.detail)
  return detail_.Get(index);
}
inline ::adu::common::metric::NodeStatus* NodeStatus::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:adu.common.metric.NodeStatus.detail)
  return detail_.Mutable(index);
}
inline ::adu::common::metric::NodeStatus* NodeStatus::add_detail() {
  // @@protoc_insertion_point(field_add:adu.common.metric.NodeStatus.detail)
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::adu::common::metric::NodeStatus >&
NodeStatus::detail() const {
  // @@protoc_insertion_point(field_list:adu.common.metric.NodeStatus.detail)
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::adu::common::metric::NodeStatus >*
NodeStatus::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:adu.common.metric.NodeStatus.detail)
  return &detail_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace metric
}  // namespace common
}  // namespace adu

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_status_2eproto__INCLUDED
