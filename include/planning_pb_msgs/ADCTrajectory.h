// Generated by gencpp from file planning_pb_msgs/ADCTrajectory.msg
// DO NOT EDIT!


#ifndef PLANNING_PB_MSGS_MESSAGE_ADCTRAJECTORY_H
#define PLANNING_PB_MSGS_MESSAGE_ADCTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <header_pb_msgs/Header.h>
#include <planning_pb_msgs/ADCTrajectoryPoint.h>
#include <planning_pb_msgs/ADCSignals.h>
#include <planning_pb_msgs/EStop.h>

namespace planning_pb_msgs
{
template <class ContainerAllocator>
struct ADCTrajectory_
{
  typedef ADCTrajectory_<ContainerAllocator> Type;

  ADCTrajectory_()
    : header()
    , total_path_length(0.0)
    , total_path_time(0.0)
    , adc_trajectory_point()
    , signals()
    , estop()  {
    }
  ADCTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , total_path_length(0.0)
    , total_path_time(0.0)
    , adc_trajectory_point(_alloc)
    , signals(_alloc)
    , estop(_alloc)  {
  (void)_alloc;
    }



   typedef  ::header_pb_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _total_path_length_type;
  _total_path_length_type total_path_length;

   typedef double _total_path_time_type;
  _total_path_time_type total_path_time;

   typedef std::vector< ::planning_pb_msgs::ADCTrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::planning_pb_msgs::ADCTrajectoryPoint_<ContainerAllocator> >::other >  _adc_trajectory_point_type;
  _adc_trajectory_point_type adc_trajectory_point;

   typedef  ::planning_pb_msgs::ADCSignals_<ContainerAllocator>  _signals_type;
  _signals_type signals;

   typedef  ::planning_pb_msgs::EStop_<ContainerAllocator>  _estop_type;
  _estop_type estop;




  typedef boost::shared_ptr< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct ADCTrajectory_

typedef ::planning_pb_msgs::ADCTrajectory_<std::allocator<void> > ADCTrajectory;

typedef boost::shared_ptr< ::planning_pb_msgs::ADCTrajectory > ADCTrajectoryPtr;
typedef boost::shared_ptr< ::planning_pb_msgs::ADCTrajectory const> ADCTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'planning_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/planning_pb_msgs/msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ef5874ef63757681a9300e97f2345d2";
  }

  static const char* value(const ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ef5874ef6375768ULL;
  static const uint64_t static_value2 = 0x1a9300e97f2345d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_pb_msgs/ADCTrajectory";
  }

  static const char* value(const ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "header_pb_msgs/Header header \n\
float64 total_path_length \n\
float64 total_path_time \n\
ADCTrajectoryPoint[] adc_trajectory_point \n\
ADCSignals signals \n\
EStop estop \n\
\n\
================================================================================\n\
MSG: header_pb_msgs/Header\n\
float64 timestamp_sec \n\
string module_name \n\
uint32 sequence_num \n\
\n\
================================================================================\n\
MSG: planning_pb_msgs/ADCTrajectoryPoint\n\
float64 x \n\
float64 y \n\
float64 z \n\
float64 s \n\
float64 l \n\
float64 speed \n\
float64 acceleration_s \n\
float64 curvature \n\
float64 curvature_change_rate \n\
float64 relative_time \n\
float64 theta \n\
\n\
================================================================================\n\
MSG: planning_pb_msgs/ADCSignals\n\
int32[] signal \n\
\n\
================================================================================\n\
MSG: planning_pb_msgs/EStop\n\
bool is_estop \n\
";
  }

  static const char* value(const ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.total_path_length);
      stream.next(m.total_path_time);
      stream.next(m.adc_trajectory_point);
      stream.next(m.signals);
      stream.next(m.estop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ADCTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_pb_msgs::ADCTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::header_pb_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "total_path_length: ";
    Printer<double>::stream(s, indent + "  ", v.total_path_length);
    s << indent << "total_path_time: ";
    Printer<double>::stream(s, indent + "  ", v.total_path_time);
    s << indent << "adc_trajectory_point[]" << std::endl;
    for (size_t i = 0; i < v.adc_trajectory_point.size(); ++i)
    {
      s << indent << "  adc_trajectory_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planning_pb_msgs::ADCTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.adc_trajectory_point[i]);
    }
    s << indent << "signals: ";
    s << std::endl;
    Printer< ::planning_pb_msgs::ADCSignals_<ContainerAllocator> >::stream(s, indent + "  ", v.signals);
    s << indent << "estop: ";
    s << std::endl;
    Printer< ::planning_pb_msgs::EStop_<ContainerAllocator> >::stream(s, indent + "  ", v.estop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_PB_MSGS_MESSAGE_ADCTRAJECTORY_H
