// Generated by gencpp from file decision_pb_msgs/DecisionResult.msg
// DO NOT EDIT!


#ifndef DECISION_PB_MSGS_MESSAGE_DECISIONRESULT_H
#define DECISION_PB_MSGS_MESSAGE_DECISIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <header_pb_msgs/Header.h>
#include <decision_pb_msgs/ObjectDecisions.h>
#include <decision_pb_msgs/MainDecision.h>

namespace decision_pb_msgs
{
template <class ContainerAllocator>
struct DecisionResult_
{
  typedef DecisionResult_<ContainerAllocator> Type;

  DecisionResult_()
    : header()
    , object_decision()
    , main_decision()  {
    }
  DecisionResult_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , object_decision(_alloc)
    , main_decision(_alloc)  {
  (void)_alloc;
    }



   typedef  ::header_pb_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::decision_pb_msgs::ObjectDecisions_<ContainerAllocator>  _object_decision_type;
  _object_decision_type object_decision;

   typedef  ::decision_pb_msgs::MainDecision_<ContainerAllocator>  _main_decision_type;
  _main_decision_type main_decision;




  typedef boost::shared_ptr< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> const> ConstPtr;

}; // struct DecisionResult_

typedef ::decision_pb_msgs::DecisionResult_<std::allocator<void> > DecisionResult;

typedef boost::shared_ptr< ::decision_pb_msgs::DecisionResult > DecisionResultPtr;
typedef boost::shared_ptr< ::decision_pb_msgs::DecisionResult const> DecisionResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decision_pb_msgs::DecisionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decision_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'perception_pb_msgs': ['/home/caros/ros/share/perception_pb_msgs/cmake/../msg'], 'prediction_pb_msgs': ['/home/caros/ros/share/prediction_pb_msgs/cmake/../msg'], 'decision_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/decision_pb_msgs/msg'], 'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8619ebeedaa9efa345046e0820c13b1";
  }

  static const char* value(const ::decision_pb_msgs::DecisionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8619ebeedaa9efaULL;
  static const uint64_t static_value2 = 0x345046e0820c13b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decision_pb_msgs/DecisionResult";
  }

  static const char* value(const ::decision_pb_msgs::DecisionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "header_pb_msgs/Header header \n\
ObjectDecisions object_decision \n\
MainDecision main_decision \n\
\n\
================================================================================\n\
MSG: header_pb_msgs/Header\n\
float64 timestamp_sec \n\
string module_name \n\
uint32 sequence_num \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectDecisions\n\
ObjectDecision[] decision \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectDecision\n\
prediction_pb_msgs/PredictionObstacle prediction \n\
string id \n\
int32 type \n\
ObjectDecisionType decision \n\
\n\
================================================================================\n\
MSG: prediction_pb_msgs/PredictionObstacle\n\
perception_pb_msgs/PerceptionObstacle perception_obstacle \n\
float64 time_stamp \n\
float64 predicted_period \n\
Trajectory[] trajectory \n\
\n\
================================================================================\n\
MSG: perception_pb_msgs/PerceptionObstacle\n\
int32 id \n\
Point position \n\
float64 theta \n\
Point velocity \n\
float64 length \n\
float64 width \n\
float64 height \n\
Point[] polygon_point \n\
float64 tracking_time \n\
int32 type \n\
float64 timestamp \n\
\n\
================================================================================\n\
MSG: perception_pb_msgs/Point\n\
float64 x \n\
float64 y \n\
float64 z \n\
\n\
================================================================================\n\
MSG: prediction_pb_msgs/Trajectory\n\
float64 probability \n\
TrajectoryPoint[] trajectory_point \n\
\n\
================================================================================\n\
MSG: prediction_pb_msgs/TrajectoryPoint\n\
float64 x \n\
float64 y \n\
float64 z \n\
float64 velocity \n\
float64 t \n\
float64 heading \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectDecisionType\n\
ObjectIgnore ignore \n\
ObjectStop stop \n\
ObjectFollow follow \n\
ObjectYield yieldX \n\
ObjectOvertake overtake \n\
ObjectNudge nudge \n\
ObjectSidePass sidepass \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectIgnore\n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectStop\n\
float64 distance_s \n\
Range preferred_distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/Range\n\
float64 start \n\
float64 end \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectFollow\n\
float64 distance_s \n\
Range preferred_distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectYield\n\
float64 distance_s \n\
Range preferred_distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectOvertake\n\
float64 distance_s \n\
Range preferred_distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectNudge\n\
float64 distance_l \n\
int32 type \n\
Range preferred_distance_l \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectSidePass\n\
float64 distance_s \n\
Range preferred_distance_s \n\
int32 type \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainDecision\n\
MainCruise cruise \n\
MainStop stop \n\
MainEmergencyStop estop \n\
MainChangeLane change_lane \n\
MainMissionComplete mission_complete \n\
MainNotReady not_ready \n\
TargetLane[] target_lane \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainCruise\n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainStop\n\
StopLine enforced_line \n\
StopLine preferred_start \n\
StopLine preferred_end \n\
string reason \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/StopLine\n\
string lane_id \n\
float64 distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainEmergencyStop\n\
string reason \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainChangeLane\n\
int32 type \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainMissionComplete\n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainNotReady\n\
string reason \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/TargetLane\n\
string id \n\
float64 start_s \n\
float64 end_s \n\
float64 speed_limit \n\
";
  }

  static const char* value(const ::decision_pb_msgs::DecisionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.object_decision);
      stream.next(m.main_decision);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct DecisionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decision_pb_msgs::DecisionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decision_pb_msgs::DecisionResult_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::header_pb_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "object_decision: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::ObjectDecisions_<ContainerAllocator> >::stream(s, indent + "  ", v.object_decision);
    s << indent << "main_decision: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >::stream(s, indent + "  ", v.main_decision);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECISION_PB_MSGS_MESSAGE_DECISIONRESULT_H
