// Generated by gencpp from file decision_pb_msgs/ObjectDecisionType.msg
// DO NOT EDIT!


#ifndef DECISION_PB_MSGS_MESSAGE_OBJECTDECISIONTYPE_H
#define DECISION_PB_MSGS_MESSAGE_OBJECTDECISIONTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <decision_pb_msgs/ObjectIgnore.h>
#include <decision_pb_msgs/ObjectStop.h>
#include <decision_pb_msgs/ObjectFollow.h>
#include <decision_pb_msgs/ObjectYield.h>
#include <decision_pb_msgs/ObjectOvertake.h>
#include <decision_pb_msgs/ObjectNudge.h>
#include <decision_pb_msgs/ObjectSidePass.h>

namespace decision_pb_msgs
{
template <class ContainerAllocator>
struct ObjectDecisionType_
{
  typedef ObjectDecisionType_<ContainerAllocator> Type;

  ObjectDecisionType_()
    : ignore()
    , stop()
    , follow()
    , yieldX()
    , overtake()
    , nudge()
    , sidepass()  {
    }
  ObjectDecisionType_(const ContainerAllocator& _alloc)
    : ignore(_alloc)
    , stop(_alloc)
    , follow(_alloc)
    , yieldX(_alloc)
    , overtake(_alloc)
    , nudge(_alloc)
    , sidepass(_alloc)  {
  (void)_alloc;
    }



   typedef  ::decision_pb_msgs::ObjectIgnore_<ContainerAllocator>  _ignore_type;
  _ignore_type ignore;

   typedef  ::decision_pb_msgs::ObjectStop_<ContainerAllocator>  _stop_type;
  _stop_type stop;

   typedef  ::decision_pb_msgs::ObjectFollow_<ContainerAllocator>  _follow_type;
  _follow_type follow;

   typedef  ::decision_pb_msgs::ObjectYield_<ContainerAllocator>  _yieldX_type;
  _yieldX_type yieldX;

   typedef  ::decision_pb_msgs::ObjectOvertake_<ContainerAllocator>  _overtake_type;
  _overtake_type overtake;

   typedef  ::decision_pb_msgs::ObjectNudge_<ContainerAllocator>  _nudge_type;
  _nudge_type nudge;

   typedef  ::decision_pb_msgs::ObjectSidePass_<ContainerAllocator>  _sidepass_type;
  _sidepass_type sidepass;




  typedef boost::shared_ptr< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectDecisionType_

typedef ::decision_pb_msgs::ObjectDecisionType_<std::allocator<void> > ObjectDecisionType;

typedef boost::shared_ptr< ::decision_pb_msgs::ObjectDecisionType > ObjectDecisionTypePtr;
typedef boost::shared_ptr< ::decision_pb_msgs::ObjectDecisionType const> ObjectDecisionTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decision_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'perception_pb_msgs': ['/home/caros/ros/share/perception_pb_msgs/cmake/../msg'], 'prediction_pb_msgs': ['/home/caros/ros/share/prediction_pb_msgs/cmake/../msg'], 'decision_pb_msgs': ['/home/scmbuild/workspaces_cluster.tmp/tmp.20161206.225249.22574/baidu/adu/ros/pb_msgs/decision_pb_msgs/msg'], 'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7880879315d35535b631c60df2769d46";
  }

  static const char* value(const ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7880879315d35535ULL;
  static const uint64_t static_value2 = 0xb631c60df2769d46ULL;
};

template<class ContainerAllocator>
struct DataType< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decision_pb_msgs/ObjectDecisionType";
  }

  static const char* value(const ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ObjectIgnore ignore \n\
ObjectStop stop \n\
ObjectFollow follow \n\
ObjectYield yieldX \n\
ObjectOvertake overtake \n\
ObjectNudge nudge \n\
ObjectSidePass sidepass \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectIgnore\n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectStop\n\
float64 distance_s \n\
Range preferred_distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/Range\n\
float64 start \n\
float64 end \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectFollow\n\
float64 distance_s \n\
Range preferred_distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectYield\n\
float64 distance_s \n\
Range preferred_distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectOvertake\n\
float64 distance_s \n\
Range preferred_distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectNudge\n\
float64 distance_l \n\
int32 type \n\
Range preferred_distance_l \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/ObjectSidePass\n\
float64 distance_s \n\
Range preferred_distance_s \n\
int32 type \n\
";
  }

  static const char* value(const ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ignore);
      stream.next(m.stop);
      stream.next(m.follow);
      stream.next(m.yieldX);
      stream.next(m.overtake);
      stream.next(m.nudge);
      stream.next(m.sidepass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ObjectDecisionType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decision_pb_msgs::ObjectDecisionType_<ContainerAllocator>& v)
  {
    s << indent << "ignore: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::ObjectIgnore_<ContainerAllocator> >::stream(s, indent + "  ", v.ignore);
    s << indent << "stop: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::ObjectStop_<ContainerAllocator> >::stream(s, indent + "  ", v.stop);
    s << indent << "follow: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::ObjectFollow_<ContainerAllocator> >::stream(s, indent + "  ", v.follow);
    s << indent << "yieldX: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::ObjectYield_<ContainerAllocator> >::stream(s, indent + "  ", v.yieldX);
    s << indent << "overtake: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::ObjectOvertake_<ContainerAllocator> >::stream(s, indent + "  ", v.overtake);
    s << indent << "nudge: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::ObjectNudge_<ContainerAllocator> >::stream(s, indent + "  ", v.nudge);
    s << indent << "sidepass: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::ObjectSidePass_<ContainerAllocator> >::stream(s, indent + "  ", v.sidepass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECISION_PB_MSGS_MESSAGE_OBJECTDECISIONTYPE_H
