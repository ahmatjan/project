// Generated by gencpp from file decision_pb_msgs/TargetLane.msg
// DO NOT EDIT!


#ifndef DECISION_PB_MSGS_MESSAGE_TARGETLANE_H
#define DECISION_PB_MSGS_MESSAGE_TARGETLANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace decision_pb_msgs
{
template <class ContainerAllocator>
struct TargetLane_
{
  typedef TargetLane_<ContainerAllocator> Type;

  TargetLane_()
    : id()
    , start_s(0.0)
    , end_s(0.0)
    , speed_limit(0.0)  {
    }
  TargetLane_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , start_s(0.0)
    , end_s(0.0)
    , speed_limit(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef double _start_s_type;
  _start_s_type start_s;

   typedef double _end_s_type;
  _end_s_type end_s;

   typedef double _speed_limit_type;
  _speed_limit_type speed_limit;




  typedef boost::shared_ptr< ::decision_pb_msgs::TargetLane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decision_pb_msgs::TargetLane_<ContainerAllocator> const> ConstPtr;

}; // struct TargetLane_

typedef ::decision_pb_msgs::TargetLane_<std::allocator<void> > TargetLane;

typedef boost::shared_ptr< ::decision_pb_msgs::TargetLane > TargetLanePtr;
typedef boost::shared_ptr< ::decision_pb_msgs::TargetLane const> TargetLaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decision_pb_msgs::TargetLane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decision_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'perception_pb_msgs': ['/home/caros/ros/share/perception_pb_msgs/cmake/../msg'], 'prediction_pb_msgs': ['/home/caros/ros/share/prediction_pb_msgs/cmake/../msg'], 'decision_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/decision_pb_msgs/msg'], 'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decision_pb_msgs::TargetLane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_pb_msgs::TargetLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_pb_msgs::TargetLane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2bfe1397bd813028f09d0699fbaffb2";
  }

  static const char* value(const ::decision_pb_msgs::TargetLane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2bfe1397bd81302ULL;
  static const uint64_t static_value2 = 0x8f09d0699fbaffb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decision_pb_msgs/TargetLane";
  }

  static const char* value(const ::decision_pb_msgs::TargetLane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id \n\
float64 start_s \n\
float64 end_s \n\
float64 speed_limit \n\
";
  }

  static const char* value(const ::decision_pb_msgs::TargetLane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.start_s);
      stream.next(m.end_s);
      stream.next(m.speed_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct TargetLane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decision_pb_msgs::TargetLane_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "start_s: ";
    Printer<double>::stream(s, indent + "  ", v.start_s);
    s << indent << "end_s: ";
    Printer<double>::stream(s, indent + "  ", v.end_s);
    s << indent << "speed_limit: ";
    Printer<double>::stream(s, indent + "  ", v.speed_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECISION_PB_MSGS_MESSAGE_TARGETLANE_H
