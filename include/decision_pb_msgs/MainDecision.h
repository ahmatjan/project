// Generated by gencpp from file decision_pb_msgs/MainDecision.msg
// DO NOT EDIT!


#ifndef DECISION_PB_MSGS_MESSAGE_MAINDECISION_H
#define DECISION_PB_MSGS_MESSAGE_MAINDECISION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <decision_pb_msgs/MainCruise.h>
#include <decision_pb_msgs/MainStop.h>
#include <decision_pb_msgs/MainEmergencyStop.h>
#include <decision_pb_msgs/MainChangeLane.h>
#include <decision_pb_msgs/MainMissionComplete.h>
#include <decision_pb_msgs/MainNotReady.h>
#include <decision_pb_msgs/TargetLane.h>

namespace decision_pb_msgs
{
template <class ContainerAllocator>
struct MainDecision_
{
  typedef MainDecision_<ContainerAllocator> Type;

  MainDecision_()
    : cruise()
    , stop()
    , estop()
    , change_lane()
    , mission_complete()
    , not_ready()
    , target_lane()  {
    }
  MainDecision_(const ContainerAllocator& _alloc)
    : cruise(_alloc)
    , stop(_alloc)
    , estop(_alloc)
    , change_lane(_alloc)
    , mission_complete(_alloc)
    , not_ready(_alloc)
    , target_lane(_alloc)  {
  (void)_alloc;
    }



   typedef  ::decision_pb_msgs::MainCruise_<ContainerAllocator>  _cruise_type;
  _cruise_type cruise;

   typedef  ::decision_pb_msgs::MainStop_<ContainerAllocator>  _stop_type;
  _stop_type stop;

   typedef  ::decision_pb_msgs::MainEmergencyStop_<ContainerAllocator>  _estop_type;
  _estop_type estop;

   typedef  ::decision_pb_msgs::MainChangeLane_<ContainerAllocator>  _change_lane_type;
  _change_lane_type change_lane;

   typedef  ::decision_pb_msgs::MainMissionComplete_<ContainerAllocator>  _mission_complete_type;
  _mission_complete_type mission_complete;

   typedef  ::decision_pb_msgs::MainNotReady_<ContainerAllocator>  _not_ready_type;
  _not_ready_type not_ready;

   typedef std::vector< ::decision_pb_msgs::TargetLane_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >::other >  _target_lane_type;
  _target_lane_type target_lane;




  typedef boost::shared_ptr< ::decision_pb_msgs::MainDecision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decision_pb_msgs::MainDecision_<ContainerAllocator> const> ConstPtr;

}; // struct MainDecision_

typedef ::decision_pb_msgs::MainDecision_<std::allocator<void> > MainDecision;

typedef boost::shared_ptr< ::decision_pb_msgs::MainDecision > MainDecisionPtr;
typedef boost::shared_ptr< ::decision_pb_msgs::MainDecision const> MainDecisionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decision_pb_msgs::MainDecision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decision_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'perception_pb_msgs': ['/home/caros/ros/share/perception_pb_msgs/cmake/../msg'], 'prediction_pb_msgs': ['/home/caros/ros/share/prediction_pb_msgs/cmake/../msg'], 'decision_pb_msgs': ['/home/scmbuild/workspaces_cluster.tmp/tmp.20161206.225249.22574/baidu/adu/ros/pb_msgs/decision_pb_msgs/msg'], 'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/caros/ros/share/header_pb_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decision_pb_msgs::MainDecision_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_pb_msgs::MainDecision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_pb_msgs::MainDecision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e968a6f5c0bd5824f0c8df13a58bf201";
  }

  static const char* value(const ::decision_pb_msgs::MainDecision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe968a6f5c0bd5824ULL;
  static const uint64_t static_value2 = 0xf0c8df13a58bf201ULL;
};

template<class ContainerAllocator>
struct DataType< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decision_pb_msgs/MainDecision";
  }

  static const char* value(const ::decision_pb_msgs::MainDecision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MainCruise cruise \n\
MainStop stop \n\
MainEmergencyStop estop \n\
MainChangeLane change_lane \n\
MainMissionComplete mission_complete \n\
MainNotReady not_ready \n\
TargetLane[] target_lane \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainCruise\n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainStop\n\
StopLine enforced_line \n\
StopLine preferred_start \n\
StopLine preferred_end \n\
string reason \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/StopLine\n\
string lane_id \n\
float64 distance_s \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainEmergencyStop\n\
string reason \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainChangeLane\n\
int32 type \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainMissionComplete\n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/MainNotReady\n\
string reason \n\
\n\
================================================================================\n\
MSG: decision_pb_msgs/TargetLane\n\
string id \n\
float64 start_s \n\
float64 end_s \n\
float64 speed_limit \n\
";
  }

  static const char* value(const ::decision_pb_msgs::MainDecision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cruise);
      stream.next(m.stop);
      stream.next(m.estop);
      stream.next(m.change_lane);
      stream.next(m.mission_complete);
      stream.next(m.not_ready);
      stream.next(m.target_lane);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MainDecision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decision_pb_msgs::MainDecision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decision_pb_msgs::MainDecision_<ContainerAllocator>& v)
  {
    s << indent << "cruise: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::MainCruise_<ContainerAllocator> >::stream(s, indent + "  ", v.cruise);
    s << indent << "stop: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::MainStop_<ContainerAllocator> >::stream(s, indent + "  ", v.stop);
    s << indent << "estop: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::MainEmergencyStop_<ContainerAllocator> >::stream(s, indent + "  ", v.estop);
    s << indent << "change_lane: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::MainChangeLane_<ContainerAllocator> >::stream(s, indent + "  ", v.change_lane);
    s << indent << "mission_complete: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::MainMissionComplete_<ContainerAllocator> >::stream(s, indent + "  ", v.mission_complete);
    s << indent << "not_ready: ";
    s << std::endl;
    Printer< ::decision_pb_msgs::MainNotReady_<ContainerAllocator> >::stream(s, indent + "  ", v.not_ready);
    s << indent << "target_lane[]" << std::endl;
    for (size_t i = 0; i < v.target_lane.size(); ++i)
    {
      s << indent << "  target_lane[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::decision_pb_msgs::TargetLane_<ContainerAllocator> >::stream(s, indent + "    ", v.target_lane[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECISION_PB_MSGS_MESSAGE_MAINDECISION_H
