// Generated by gencpp from file header_pb_msgs/Header.msg
// DO NOT EDIT!


#ifndef HEADER_PB_MSGS_MESSAGE_HEADER_H
#define HEADER_PB_MSGS_MESSAGE_HEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace header_pb_msgs
{
template <class ContainerAllocator>
struct Header_
{
  typedef Header_<ContainerAllocator> Type;

  Header_()
    : timestamp_sec(0.0)
    , module_name()
    , sequence_num(0)  {
    }
  Header_(const ContainerAllocator& _alloc)
    : timestamp_sec(0.0)
    , module_name(_alloc)
    , sequence_num(0)  {
  (void)_alloc;
    }



   typedef double _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _module_name_type;
  _module_name_type module_name;

   typedef uint32_t _sequence_num_type;
  _sequence_num_type sequence_num;




  typedef boost::shared_ptr< ::header_pb_msgs::Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::header_pb_msgs::Header_<ContainerAllocator> const> ConstPtr;

}; // struct Header_

typedef ::header_pb_msgs::Header_<std::allocator<void> > Header;

typedef boost::shared_ptr< ::header_pb_msgs::Header > HeaderPtr;
typedef boost::shared_ptr< ::header_pb_msgs::Header const> HeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::header_pb_msgs::Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::header_pb_msgs::Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace header_pb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'common_pb_msgs': ['/home/caros/ros/share/common_pb_msgs/cmake/../msg'], 'header_pb_msgs': ['/home/scmbuild/workspaces_cluster/baidu.adu.ros/baidu/adu/ros/pb_msgs/header_pb_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::header_pb_msgs::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::header_pb_msgs::Header_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::header_pb_msgs::Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::header_pb_msgs::Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::header_pb_msgs::Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::header_pb_msgs::Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::header_pb_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06715a034fb205d0968652071794fe95";
  }

  static const char* value(const ::header_pb_msgs::Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06715a034fb205d0ULL;
  static const uint64_t static_value2 = 0x968652071794fe95ULL;
};

template<class ContainerAllocator>
struct DataType< ::header_pb_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "header_pb_msgs/Header";
  }

  static const char* value(const ::header_pb_msgs::Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::header_pb_msgs::Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp_sec \n\
string module_name \n\
uint32 sequence_num \n\
";
  }

  static const char* value(const ::header_pb_msgs::Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::header_pb_msgs::Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.module_name);
      stream.next(m.sequence_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::header_pb_msgs::Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::header_pb_msgs::Header_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "module_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.module_name);
    s << indent << "sequence_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sequence_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEADER_PB_MSGS_MESSAGE_HEADER_H
